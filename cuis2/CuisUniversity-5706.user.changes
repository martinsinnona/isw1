

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (27 April 2023 18:19:16) as /home/martin/Desktop/facu/Inge I/isw1/cuis2/CuisUniversity-5706.image!


----End fileIn of /home/martin/Desktop/facu/Inge I/isw1/cuis2/TDDBabyStepsGame.st----!

TDDBabyStepsGameRot13 start.!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'ma 4/27/2023 18:28:40'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:28:59'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:31:12'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:31:12'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:31:32'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:32:19' prior: 50605763!
asRot13
	
	^ $n.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:48'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:32:48'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:48'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:48'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:32:48'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:48'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:32:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:03'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:03'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:27'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:27'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:58'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:33:58'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:35:41' prior: 50605767!
asRot13
	
	(self = $a) ifTrue: [^ $n].
	^ $z.
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:35:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:36:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:36:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:36:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:41:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:41:28'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:41:28'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:41:28'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:41:28'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:41:28'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:41:28'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:45:03' prior: 50605843!
asRot13
	
	(self = $a) ifTrue: [^ $n].
	(self = $n) ifTrue: [^ $a].
	^ $z.
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:45:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 18:45:29'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:45:29'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:51:23' prior: 50605903!
asRot13
	
	^ Character asciiValue: self asciiValue + 13.
	! !

----SNAPSHOT----(27 April 2023 18:51:45) CuisUniversity-5706.image priorSource: 8713034!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:51:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:51:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:51:51'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:51:51'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:55:00' prior: 50605964!
asRot13
	
	(Character asciiValue between:  $a asciiValue and: $m asciiValue) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

----SNAPSHOT----(27 April 2023 18:55:05) CuisUniversity-5706.image priorSource: 8778173!

$a asciiValue !

$a asciiValue:  1!

$a asciiValue: $a!

Character asciiValue: 65!

$a asciiValue between: $a asciiValue and: $m asciiValue!

$z asciiValue between: $a asciiValue and: $m asciiValue!

$m asciiValue between: $a asciiValue and: $m asciiValue!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 18:59:19' prior: 50605989!
asRot13
	
	(self asciiValue between:  $a asciiValue and: $m asciiValue) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:59:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 18:59:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:59:34'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 18:59:34'!
PASSED!
!Character methodsFor: 'nil' stamp: 'ma 4/27/2023 19:02:38'!
isBetween: initialCharacter and: endCharacter

! !
!Character methodsFor: 'as yet unclassified' stamp: 'ma 4/27/2023 19:03:13' prior: 50606035!
isBetween: initialCharacter and: endCharacter

self asciiValue between:  initialCharacter asciiValue and: endCharacter asciiValue! !
!Character methodsFor: 'as yet unclassified' stamp: 'ma 4/27/2023 19:03:29' prior: 50606040!
isBetween: initialCharacter and: endCharacter

	^self asciiValue between:  initialCharacter asciiValue and: endCharacter asciiValue! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:04:12' prior: 50606009!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:04:40'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:04:40'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:04:40'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:04:40'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:04:40'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:04:40'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:06:14' prior: 50606055!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13].
	(self isBetween: $n and: $z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13].
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:06:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:06:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:06:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:06:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:06:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:08:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:08:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:08:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:08:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:08:37'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:08:37'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:08:37'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:08:37'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:09:43' prior: 50606123!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13
	].
	^ Character asciiValue: self asciiValue - 13.
	
	! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:10:12' prior: 50606189!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13
	] ifFalse: [
		^ self.	
	].
	^ Character asciiValue: self asciiValue - 13.
	
	! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:10:37' prior: 50606197!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13].
	(self isBetween: $n and: $z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13].
	
	! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:11:18' prior: 50606206!
asRot13
	
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:11:55' prior: 50606215!
asRot13
	
	(self = $`) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:12:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:12:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:12:15'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:12:15'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:12:15'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:12:15'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:12:15'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:12:15'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:13:10' prior: 50606223!
asRot13
	
	(self = $` or: [self = ${]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:13:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:13:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:13:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:13:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:13:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:13:19'!
PASSED!
!Character methodsFor: 'as yet unclassified' stamp: 'ma 4/27/2023 19:16:12'!
isOutsideRange: initialCharacter and: endCharacter

	^ (self asciiValue between:  initialCharacter asciiValue and: endCharacter asciiValue) not.! !
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:16:33' prior: 50606299!
asRot13
	
	(self isOutsideRange: $a and: $z) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:16:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:16:44'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:16:44'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:16:44'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:16:44'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:16:44'!
FAILURE!

$a asciiValue!

$z asciiValue!

$A asciiValue!

$Z asciiValue!

----SNAPSHOT----(27 April 2023 19:18:06) CuisUniversity-5706.image priorSource: 8779120!

----SNAPSHOT----(27 April 2023 19:18:16) CuisUniversity-5706.image priorSource: 8793089!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:21:55' prior: 50606341!
asRot13
	
	(self isOutsideRange: $a and: $z) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:22:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:07'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:22:26' prior: 50606441!
asRot13
	
	(self isOutsideRange: $A and: $z) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:22:30'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:22:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:22:30'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:23:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:23:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:23:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:23:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:23:11'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:23:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:23:11'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:24:10' prior: 50606489!
asRot13
	
	((self isOutsideRange: $A and: $	Z) or: [self isOutsideRange: $a and: $	z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 

	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:24:14'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:25:16' prior: 50606562!
asRot13
	
	((self isOutsideRange: $A and: $Z) or: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 

	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:25:19'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:25:19'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:25:19'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:25:19'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:25:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:25:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:25:19'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:25:58' prior: 50606607!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 

	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:26:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:26:01'!
FAILURE!

$4 asciiValue!

$A asciiValue!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:27:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:10'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:27:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:27:35'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:28:34' prior: 50606652!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		^ Character asciiValue: self asciiValue - 13.
	]. 
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

----SNAPSHOT----(27 April 2023 19:28:40) CuisUniversity-5706.image priorSource: 8793179!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:28:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:28:43'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:29:04' prior: 50606770!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		
		(self isBetween: $A and: $M) ifTrue: [
			^ Character asciiValue: self asciiValue + 13.
		] ifFalse: [
			^ Character asciiValue: self asciiValue - 13.
		]. 
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:29:08'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:29:08'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:30:01' prior: 50606818!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		
		(self isBetween: $A and: $M) ifTrue: [
			^ Character asciiValue: self asciiValue + 13.
		]. 
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:30:10'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:30:10'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:32:45' prior: 50606885!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
		
		(self = $N or: self = $M) ifTrue: [
			^ Character asciiValue: self asciiValue + 13.
		]. 
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:32:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:32:49'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:33:40' prior: 50606979!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
			(self = $N or: self = $M) ifTrue: [
			^ Character asciiValue: self asciiValue + 13.
		]. 
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:33:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:33:45'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:34:09' prior: 50607027!
asRot13
	
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self = $N or: self = $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
		]. 
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:34:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:17'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:34:37' prior: 50607075!
asRot13
	
	(self = $N or: self = $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
		]. 
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:34:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:34:43'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:35:10' prior: 50607123!
asRot13
	
	(self = $A or: self = $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
		]. 
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:35:21'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:35:21'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:37:52' prior: 50607171!
asRot13
	
	(self = $A) ifTrue: [
		^$N]. 
	(self = $M) ifTrue: [
		^$Z].
	((self isOutsideRange: $A and: $Z) and: [self isOutsideRange: $a and: $z]) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:38:02'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:38:02'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:39:21' prior: 50607264!
asRot13
	
	(self = $A) ifTrue: [
		^$N]. 
	(self = $M) ifTrue: [
		^$Z].
	(self isOutsideRange: $a and: $z) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:39:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:39:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:39:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:39:30'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:43:23' prior: 50607357!
asRot13
	
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.].
	(self isBetween: $N and: $Z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13.].
	(self isOutsideRange: $a and: $z) ifTrue: [^self].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:43:31'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:43:31'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:43:31'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:43:31'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'ma 4/27/2023 19:43:31'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:43:31'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:44:51' prior: 50607460!
asRot13
	
	
	( (self isOutsideRange: $a and: $z) or: (self isOutsideRange: $A and: $Z) ) ifTrue: [^self].
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.].
	(self isBetween: $N and: $Z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13.].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:44:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:44:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:44:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:44:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:05'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:45:26' prior: 50607566!
asRot13
	
	
	( (self isOutsideRange: $a and: $z) and: (self isOutsideRange: $A and: $Z) ) ifTrue: [^self].
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.].
	(self isBetween: $N and: $Z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13.].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.
	] ifFalse: [
	
		^ Character asciiValue: self asciiValue - 13.
	]. 

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:45:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:45:29'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:45:29'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'ma 4/27/2023 19:47:49' prior: 50607625!
asRot13
	
	(self isBetween: $A and: $M) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.].
	(self isBetween: $N and: $Z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13.].
	(self isBetween: $a and: $m) ifTrue: [
		^ Character asciiValue: self asciiValue + 13.].
	(self isBetween: $n and: $z) ifTrue: [
		^ Character asciiValue: self asciiValue - 13.] ifFalse: [
		^self.].

	
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'ma 4/27/2023 19:47:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:47:53'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'ma 4/27/2023 19:47:53'!
ERROR!

----SNAPSHOT----(27 April 2023 20:01:26) CuisUniversity-5706.image priorSource: 8804329!

----SNAPSHOT----(27 April 2023 20:01:38) CuisUniversity-5706.image priorSource: 8834779!

----STARTUP---- (8 May 2023 21:35:37) as /home/martin/Desktop/facu/Inge I/isw1/cuis2/CuisUniversity-5706.image!


!classRemoval: #TDDBabyStepsRot13Test stamp: 'ma 5/8/2023 21:35:54'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!

!classRemoval: #TDDBabyStepsGameView stamp: 'ma 5/8/2023 21:35:56'!
Object subclass: #TDDBabyStepsGameView
	instanceVariableNames: 'model stepResult gameJourney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnPrematureDecisionStep stamp: 'ma 5/8/2023 21:35:56'!
TDDBabyStepsGameState subclass: #OnPrematureDecisionStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnNormalStep stamp: 'ma 5/8/2023 21:35:56'!
TDDBabyStepsGameState subclass: #OnNormalStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameStarting stamp: 'ma 5/8/2023 21:35:56'!
TDDBabyStepsGameState subclass: #GameStarting
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameEnded stamp: 'ma 5/8/2023 21:35:57'!
TDDBabyStepsGameState subclass: #GameEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameState stamp: 'ma 5/8/2023 21:35:57'!
Object subclass: #TDDBabyStepsGameState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameBase stamp: 'ma 5/8/2023 21:35:57'!
Object subclass: #TDDBabyStepsGameBase
	instanceVariableNames: 'name casesToTest currentStep currentStepReturnMessage category score currentTest journey definition extraTest state prematureDecisionVerifierStrategy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameRot13 stamp: 'ma 5/8/2023 21:35:57'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameRot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGamePrimeFactors stamp: 'ma 5/8/2023 21:35:57'!
TDDBabyStepsGame subclass: #TDDBabyStepsGamePrimeFactors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameDemo stamp: 'ma 5/8/2023 21:35:58'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameDemo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameCuentaBancaria stamp: 'ma 5/8/2023 21:35:58'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameCuentaBancaria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameContador stamp: 'ma 5/8/2023 21:35:58'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameContador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameAnagrams stamp: 'ma 5/8/2023 21:35:58'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameAnagrams
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGame stamp: 'ma 5/8/2023 21:35:58'!
Object subclass: #TDDBabyStepsGame
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameWindow stamp: 'ma 5/8/2023 21:35:58'!
SystemWindow subclass: #TDDBabyStepsGameWindow
	instanceVariableNames: 'stepResultTextBoxMorph nextButtonMorph forceNextButtonMorph definitionButtonMorph gameJourneyTextBoxMorph testNumberLabel pointsLabel helpButtonMorph lastStepPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

----End fileIn of /home/martin/Desktop/facu/Inge I/isw1/cuis2/ISW1-2023-1C-Parcial-1.st----!

----STARTUP---- (8 May 2023 21:38:22) as /home/martin/Desktop/facu/Inge I/isw1/cuis2/CuisUniversity-5706.image!


----End fileIn of /home/martin/Desktop/facu/Inge I/isw1/cuis2/ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test20DobleCapaArenosaAlPrincipioCausaError stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test21DobleCapaDeTierraAlFinalCausaError stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test22TripleCapaDeTierraAlMedioCausaError stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

!testRun: #TestDePerforación #test23DobleCapaArenosaAlPrincipioCausaError stamp: 'ma 5/8/2023 21:38:45'!
PASSED!

----SNAPSHOT----(8 May 2023 21:38:51) CuisUniversity-5706.image priorSource: 8834869!