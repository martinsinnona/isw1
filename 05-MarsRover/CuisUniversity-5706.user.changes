

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (22 March 2023 15:14:52) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


ObjectBuilder create: #MiObjeto asChildOf: DenotativeObject collaboratorNames: '' in: 'Prueba'!

!classDefinition: #MiObjeto category: 'Prueba' stamp: 'sinno 3/22/2023 15:20:23'!
DenotativeObject subclass: #MiObjeto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Prueba'!

!classDefinition: 'MiObjeto class' category: 'Prueba' stamp: 'sinno 3/22/2023 15:20:23'!
MiObjeto class
	instanceVariableNames: ''!
!MiObjeto class methodsFor: 'saludos' stamp: 'sinno 3/22/2023 15:29:13'!
hola
	^'chau'! !

MiObjeto hola
!

MiObjeto hola!

ObjectBuilder create: #Bill asChildOf: DenotativeObject collaboratorNames: '' in: 'Zombies'!

!classDefinition: #Bill category: 'Zombies' stamp: 'sinno 3/22/2023 15:30:46'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombies'!

!classDefinition: 'Bill class' category: 'Zombies' stamp: 'sinno 3/22/2023 15:30:46'!
Bill class
	instanceVariableNames: ''!

!classDefinition: 'Bill class' category: 'Zombies' stamp: 'sinno 3/22/2023 15:32:14'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'vitalidad' stamp: 'sinno 3/22/2023 15:32:12'!
energia
	^energia
	! !

Bill energia!

energia := 28!

Bill energia!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:38:41'!
comer: unaCantidadDeKilosDeCerebro
	energia := energia + unaCantidadDeKilosDeCerebro  * 4! !

Bill comer: 1!

Bill energia!

Bill energia!

energia!

energia := 28!

Bill comer: 0!

energia := 28!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:42:09' prior: 50603981!
comer: unaCantidadDeKilosDeCerebro
	energia := 0! !

	energia := 0!

Bill comer: 0!

Bill comer: 0!

Bill comer: 2323!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:43:17' prior: 50603990!
comer: unaCantidadDeKilosDeCerebro
	energia := unaCantidadDeKilosDeCerebro ! !

Bill comer: 2323!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:43:33' prior: 50603997!
comer: unaCantidadDeKilosDeCerebro
	energia := unaCantidadDeKilosDeCerebro * 4! !

Bill comer: 0!

Bill comer: 1!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:44:15' prior: 50604003!
comer: unaCantidadDeKilosDeCerebro
	energia := unaCantidadDeKilosDeCerebro * 4 + energia! !

energia := 0!

Bill comer: 1!

Bill comer: 1!

Bill comer: 1!

Bill comer: 1!

energia := 28!

Bill comer: 1!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:46:15' prior: 50604010!
comer: unaCantidadDeKilosDeCerebro
	energia := energia + unaCantidadDeKilosDeCerebro * 4! !

Bill comer: 1!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:46:46' prior: 50604020!
comer: unaCantidadDeKilosDeCerebro
	energia := energia + (unaCantidadDeKilosDeCerebro * 4)! !

Bill comer: 1!

Bill comer: 1!

energia := 28!

Bill comer: 1!

energia := 28!
!Bill class methodsFor: 'acciones' stamp: 'sinno 3/22/2023 15:48:54'!
caminar: unaCantidadDeKilometros
	energia := energia - unaCantidadDeKilometros - 3! !

Bill caminar: 0!

Bill caminar: 2!

----SNAPSHOT----(22 March 2023 15:49:51) CuisUniversity-5706.image priorSource: 8713034!

----SNAPSHOT----(22 March 2023 15:50:07) CuisUniversity-5706.image priorSource: 8716505!

----STARTUP---- (23 March 2023 20:30:26) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


----End fileIn of C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\Packages\TerseGuide.pck.st----!

!classRemoval: #Bill stamp: 'sinno 3/23/2023 20:32:54'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombies'!

!classRemoval: #MiObjeto stamp: 'sinno 3/23/2023 20:32:57'!
DenotativeObject subclass: #MiObjeto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Prueba'!

ObjectBuilder create: #BooleanoTest
	collaboratorNames: ''
	in: 'EjercicioBooleano'
	!

!classDefinition: #BooleanoTest category: 'EjercicioBooleano' stamp: 'sinno 3/23/2023 20:36:02'!
DenotativeObject subclass: #BooleanoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioBooleano'!

!classDefinition: 'BooleanoTest class' category: 'EjercicioBooleano' stamp: 'sinno 3/23/2023 20:36:02'!
BooleanoTest class
	instanceVariableNames: ''!
!BooleanoTest class methodsFor: 'nil' stamp: 'sinno 3/23/2023 20:40:37'!
test01FalsoNegadoDevuelveVerdadero

	! !

!classDefinition: #Falso category: 'EjercicioBooleano' stamp: 'sinno 3/23/2023 20:43:59'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioBooleano'!

!classRemoval: #Falso stamp: 'sinno 3/23/2023 20:44:46'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioBooleano'!

!classDefinition: #Falso category: 'EjercicioBooleano' stamp: 'sinno 3/23/2023 20:45:34'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioBooleano'!

!classDefinition: #Verdadero category: 'EjercicioBooleano' stamp: 'sinno 3/23/2023 20:45:38'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'EjercicioBooleano'!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 20:45:29' prior: 50606998!
test01FalsoNegadoDevuelveVerdadero

	Assert that: Falso no isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:46:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:46:12'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 20:47:52'!
test02VerdaderoNegadoDevuelveFalso

	Assert that: Verdadero no isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:48:07'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:48:07'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 20:48:45'!
no
	self shouldBeImplemented.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:49:13'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 20:49:13'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 20:51:20' prior: 50607055!
no
! !
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 20:56:58' prior: 50607065!
no
	^Falso! !
!Falso class methodsFor: 'nil' stamp: 'sinno 3/23/2023 20:57:18'!
no
	^Verdadero! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:00:03'!
test03FalsoYFalsoDevuelveFalso

	Assert that: (Falso y: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:00:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:00:18'!
ERROR!
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:00:37'!
y: Falso 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:01:09' prior: 50607087!
y: Falso 
	^Falso! !
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:02:01' prior: 50607092!
y: unValorDeVerdad 
	^Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:02:24'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:03:18'!
test04FalsoYVerdaderoDevuelveFalso

	Assert that: (Falso y: Verdadero) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:03:22'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:04:15'!
test05VerdaderoYVerdaderoDevuelveVerdadero

	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:04:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:04:21'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:04:26'!
y: Verdadero 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:05:41' prior: 50607124!
y: unValorDeVerdad 
	^unValorDeVerdad! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:05:59'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:07:15'!
test06VerdaderoYFalsoDevuelveFalso

	Assert that: (Verdadero y: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:07:18'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:07:48'!
test07FalsoOFalsoDevuelveFalso

	Assert that: (Falso o: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:07:52'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:07:52'!
ERROR!
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:07:57'!
o: Falso 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:08:38' prior: 50607157!
o: unValorDeVerdad 
	^unValorDeVerdad ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:08:42'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:09:08'!
test08FalsoOVerdaderoDevuelveVerdadero

	Assert that: (Falso o: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:09:11'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:09:36'!
test09VerdaderoOFalsoDevuelveVerdadero

	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:09:38'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:09:38'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:09:41'!
o: Falso 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:10:00' prior: 50607191!
o: unValorDeVerdad 
	^Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:10:04'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:10:20'!
test10VerdaderoOVerdaderoDevuelveVerdadero

	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:10:23'!
PASSED!

----SNAPSHOT----(23 March 2023 21:21:41) CuisUniversity-5706.image priorSource: 8716595!

a := OrderedCollection new.!

a := OrderedCollection new.!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:37:58'!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^Verdadero]) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:38:06'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:38:06'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:38:10'!
siEsVerdadero: aRenameMe1 
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:40:08' prior: 50607230!
siEsVerdadero: aClosure 
	^aClosure value! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:40:21'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:40:38' prior: 50607217!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [Verdadero]) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:40:41'!
PASSED!
!Verdadero class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 21:41:15' prior: 50607235!
siEsVerdadero: aClosure 
	aClosure value! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:41:20'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:41:27' prior: 50607243!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^Verdadero]) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:41:30'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:41:36' prior: 50607261!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:41:40'!
PASSED!

(Verdadero siEsVerdadero: [^Falso])!

Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:42:14'!
PASSED!

Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero!

BooleanoTest  test11VerdaderoSiEsVerdaderoEjecuta !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:43:29'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:43:43' prior: 50607271!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: Falso isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:43:45'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:43:45'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:44:40' prior: 50607295!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero! !

(Verdadero siEsVerdadero: [^Falso])!

Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:44:57'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:45:02'!
PASSED!

(Verdadero siEsVerdadero: [^Falso])!

Assert that: (Verdadero siEsVerdadero: [^Falso]) isEqualTo: Verdadero!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:46:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:46:17'!
PASSED!

(Verdadero siEsVerdadero: [^Falso])!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:48:31' prior: 50607307!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [Falso]) isEqualTo: Verdadero! !

(Verdadero siEsVerdadero: [Falso])!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:51:46' prior: 50607368!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^2]) isEqualTo: 2! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:51:49'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:51:53' prior: 50607376!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: (Verdadero siEsVerdadero: [^3]) isEqualTo: 2! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:51:57'!
PASSED!

(Verdadero siEsVerdadero: [^3])!

Assert that: (Verdadero siEsVerdadero: [^3]) isEqualTo: 2!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:52:25'!
PASSED!

(Verdadero siEsVerdadero: [^3])!

(Verdadero siEsVerdadero: [^3])!

Assert that: (Verdadero siEsVerdadero: [^3]) isEqualTo: 2!

Assert that: (Verdadero siEsVerdadero: [^3]) isEqualTo: 2!

(Verdadero siEsVerdadero: [^3])!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:55:48' prior: 50607386!
test11VerdaderoSiEsVerdaderoEjecuta

	Assert that: 3 isEqualTo: 2! !

Assert that: 3 isEqualTo: 2!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:57:24' prior: 50607442!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1|
	
	n1 := 0.
	aClosure := [n1 + 5].
	
	Assert that: (Verdadero siEsVerdadero: aClosure) isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:57:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:57:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:57:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:57:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:57:47'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 21:58:53' prior: 50607449!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 + 5].
	
	Assert that: (Verdadero siEsVerdadero: aClosure) isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:58:55'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 21:58:55'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:01:06' prior: 50607473!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	Verdadero siEsVerdadero: aClosure.
	
	Assert that: 5 isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:01:15'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:01:22' prior: 50607488!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	Verdadero siEsVerdadero: aClosure.
	Assert that: 5 isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:01:32'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:01:46' prior: 50607500!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	"Verdadero siEsVerdadero: aClosure."
	Assert that: 5 isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:01:52'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:02:06' prior: 50607512!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	"Verdadero siEsVerdadero: aClosure."
	Assert that: 5 isEqualTo: n1.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:02:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:02:15'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:02:22' prior: 50607524!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	Verdadero siEsVerdadero: aClosure.
	Assert that: 5 isEqualTo: n1.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:02:25'!
PASSED!
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 22:05:22'!
siFalso: aClosure
	^self! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:06:03'!
test12FalsoSiEsVerdaderoNoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	Falso siEsVerdadero: aClosure.
	Assert that: n1 isEqualTo: 0.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:06:06'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:06:06'!
ERROR!
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 22:06:15'!
siEsVerdadero: aClosure 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operaciones' stamp: 'sinno 3/23/2023 22:06:24' prior: 50607568!
siEsVerdadero: aClosure 
	^self! !

!methodRemoval: Falso class #siFalso: stamp: 'sinno 3/23/2023 22:06:34'!
siFalso: aClosure
	^self!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:06:44'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'sinno 3/23/2023 22:06:54' prior: 50607539!
test11VerdaderoSiEsVerdaderoEjecuta
	
	| aClosure n1 |
	
	n1 := 0.
	aClosure := [n1 := 5].
	
	Verdadero siEsVerdadero: aClosure.
	Assert that: n1 isEqualTo: 5.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:06:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/23/2023 22:06:59'!
PASSED!

----SNAPSHOT----(23 March 2023 22:07:05) CuisUniversity-5706.image priorSource: 8817963!

----SNAPSHOT----(23 March 2023 22:08:42) CuisUniversity-5706.image priorSource: 8830308!

----STARTUP---- (28 March 2023 23:03:56) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


ObjectBuilder create: #I asChildOf: DenotativeObject collaboratorNames: '' in: 'Ejercicio Numeros Naturales'!

!classDefinition: #I category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:05:00'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: 'I class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:05:00'!
I class
	instanceVariableNames: ''!

!classRemoval: #I stamp: 'sinno 3/28/2023 23:06:25'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

----End fileIn of C:\Users\marti\Downloads\Natural Numbers Peano.st----!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:10:08' prior: 50607683!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!I class methodsFor: 'nil' stamp: 'sinno 3/28/2023 23:16:06'!
* aNumber
	^aNumber
	! !

I * II!
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:19:26'!
* aNumber
	^ aNumber + (self previous * aNumber)! !

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:11'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:11'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:11'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:11'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:11'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:11'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:11'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:11'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:11'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:11'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:11'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:11'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:11'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:12'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:12'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:12'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:12'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:12'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

 IIII !

II * I!

IIII * II !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:29'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:29'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:29'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:29'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:29'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:29'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:29'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:30'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:30'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:30'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:30'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:30'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:30'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:30'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:30'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:31'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:31'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:21:31'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:31'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:21:31'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:31'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:32'!
previous
	^previous.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:32'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:21:32'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

!classRemoval: #IIIIIIII stamp: 'sinno 3/28/2023 23:21:58'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIIII stamp: 'sinno 3/28/2023 23:22:01'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/28/2023 23:22:03'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/28/2023 23:22:05'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/28/2023 23:22:06'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/28/2023 23:22:08'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

----SNAPSHOT----(28 March 2023 23:22:45) CuisUniversity-5706.image priorSource: 8830398!

II * I!

1 // 3!

I - II!
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:36:40'!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^ (self > aNumber previous)]! !
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:37:28' prior: 50608091!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self > aNumber previous)]! !
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:38:49' prior: 50608097!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self > aNumber next)]! !
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:39:35' prior: 50608103!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self previous > aNumber)]! !
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:39:58' prior: 50608109!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [self previous > aNumber]! !
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:40:15'!
> aNumber
	^False! !

II > I!

II > II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:40:34'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:40:34'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:40:34'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:40:34'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:34'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:34'!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [self previous > aNumber]! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:34'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:34'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:34'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:40:35'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

II > II!

I > II!

I > I!
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:42:27' prior: 50608115!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:42:35' prior: 50608157!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self previous > aNumber)]! !

II > II!

III > II!

III > I!

III > III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:43:00'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:43:00'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:43:00'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:43:00'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
> aNumber
	(aNumber next = self) ifTrue: [^True] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:43:00'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

!classRemoval: #IIII stamp: 'sinno 3/28/2023 23:43:12'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/28/2023 23:43:14'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:46:43'!
/ aNumber
	(aNumber = 1) ifTrue: [^1]! !
!II class methodsFor: 'nil' stamp: 'sinno 3/28/2023 23:48:38'!
/ aNumber
	(self > aNumber) ifTrue: [^(1 + ((self - aNumber) / aNumber))]! !
!II class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:50:20' prior: 50608266!
/ aNumber
	(self = aNumber) ifTrue: [^1].
	(self > aNumber) ifTrue: [^(1 + ((self - aNumber) / aNumber))]! !

II / II!
!II class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:50:34' prior: 50608272!
/ aNumber
	(self = aNumber) ifTrue: [^I].
	(self > aNumber) ifTrue: [^(I + ((self - aNumber) / aNumber))]! !

II / II!

II / I!

II / I!

II / I!

(self - aNumber)!

aNumber!

((self - aNumber) / aNumber)!

(I + ((self - aNumber) / aNumber))!

(self > aNumber) ifTrue: [^(I + ((self - aNumber) / aNumber))]!

^(I + ((self - aNumber) / aNumber))!
!II class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:52:05' prior: 50608279!
/ aNumber
	(self = aNumber) ifTrue: [^I].
	(self > aNumber) ifTrue: [^(I + ((self - aNumber) / aNumber))].! !

II / I!

^(I + ((self - aNumber) / aNumber))!

[^(I + ((self - aNumber) / aNumber))]!

(self > aNumber)!

(self > aNumber) ifTrue: [^(I + ((self - aNumber) / aNumber))].!

(self > aNumber)!

1 > 2!

1 > 2 = I > II!

(1 > 2) = (I > II)!

(I > II)!

(1 > 2)!

(1 > 2) = (I > II)!

False = False!
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:56:45' prior: 50608121!
> aNumber
	^false! !
!II class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:56:53' prior: 50608181!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !

II / I!

I / II!

 II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:58:37'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/28/2023 23:58:37'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:58:37'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/28/2023 23:58:37'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:37'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:37'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:38'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:38'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:38'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/28/2023 23:58:38'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/28/2023 23:58:38'!
/ aNumber
	(self = aNumber) ifTrue: [^I].
	(self > aNumber) ifTrue: [^(I + ((self - aNumber) / aNumber))].! !

 III / II!

 III / II !

 III / II !

!classRemoval: #III stamp: 'sinno 3/29/2023 00:34:03'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

true or: false!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:47:15' prior: 50608293!
/ aNumber
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))].! !
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:48:49' prior: 50608390!
/ aNumber
	(self = aNumber) ifTrue: [^I].
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))].! !

I / II!

I / II!

I / II!

I / II!

II / I!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:50:35' prior: 50608397!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))].! !

II / I!

II / II!

I / I!

I / II!

1 / April!

1 / April!
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 00:53:47' prior: 50608262!
/ aNumber
	(aNumber = 1) ifTrue: [^1] ifFalse: []! !

I / II!

----SNAPSHOT----(29 March 2023 00:55:06) CuisUniversity-5706.image priorSource: 8845962!

!methodRemoval: I class #/ stamp: 'sinno 3/29/2023 00:56:02'!
/ aNumber
	(aNumber = 1) ifTrue: [^1] ifFalse: []!

I / II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 00:56:29'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 00:56:29'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:56:29'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:56:29'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:56:29'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))].! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 00:56:29'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

III / II!

III / II!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:57:29' prior: 50608406!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:57:46' prior: 50608458!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > 2*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !

III / II!

III / II!

III / II!

aNumber next!

self!

aNumber!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:58:33' prior: 50608504!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > II*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:58:42' prior: 50608495!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > II*aNumber) or: (self = 2*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !

III / II!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:58:57' prior: 50608515!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > II*aNumber) or: (self = II*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:59:01' prior: 50608524!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > II*aNumber) or: (self = II*aNumber)) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !

III / II!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 00:59:31' prior: 50608543!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !

!classRemoval: #III stamp: 'sinno 3/29/2023 00:59:35'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

II next!

II next!

II next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:00'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:00'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:00'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:01'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:01'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:01'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

III / II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:14'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:14'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:14'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:15'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:15'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:15'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:15'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:15'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:15'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

III / III!

III / III!

IIIII / IIII!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:48'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:48'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:48'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:48'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:49'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:49'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:49'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:49'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:49'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:49'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:49'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:50'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:50'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:50'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:50'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:50'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:50'!
previous
	^previous.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:51'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 01:00:51'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:51'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:51'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:00:51'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
previous
	^previous.! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 01:00:51'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

IIIII / IIII !

IIIII / III!

IIIII / II!

IIIII / I!

----SNAPSHOT----(29 March 2023 01:02:17) CuisUniversity-5706.image priorSource: 8856669!

I / I!

I / I!

I / II!
!I class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 01:05:15'!
/ aNumber
	^(self next / aNumber next)! !

I / I!

III / III!

I / II!

I / II!

!methodRemoval: I class #/ stamp: 'sinno 3/29/2023 01:06:32'!
/ aNumber
	^(self next / aNumber next)!

----SNAPSHOT----(29 March 2023 01:08:40) CuisUniversity-5706.image priorSource: 8876385!

----STARTUP---- (29 March 2023 12:15:25) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #IIIIIIIII stamp: 'sinno 3/29/2023 12:15:34'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIIIII stamp: 'sinno 3/29/2023 12:15:37'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIIII stamp: 'sinno 3/29/2023 12:15:39'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/29/2023 12:15:42'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/29/2023 12:15:43'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/29/2023 12:15:45'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

II / III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:02'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:02'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:02'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:02'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:02'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:03'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:03'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:03'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:03'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:03'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:03'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:04'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:04'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:04'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:04'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:04'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:04'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:05'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:16:05'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:05'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:05'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:16:05'!
/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:16:05'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

!classRemoval: #IIIIIII stamp: 'sinno 3/29/2023 12:16:16'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/29/2023 12:16:17'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/29/2023 12:16:19'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/29/2023 12:16:21'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/29/2023 12:16:22'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:17:21' prior: 50608553!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber! !
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:18:18' prior: 50609393!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!II class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:19:06'!
divideTo: aNumber
	! !
!II class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:29:14' prior: 50609413!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber > (II * self))! !
!II class methodsFor: 'nil' stamp: 'sinno 3/29/2023 12:29:57'!
>= aNumber
! !

II >= II!
!II class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 12:30:52' prior: 50609422!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II > II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:30:56'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 12:30:56'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:30:56'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:30:56'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 12:30:56'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber > (II * self))! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:30:57'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 12:30:57'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II >= II!

I >= II!
!I class methodsFor: 'nil' stamp: 'sinno 3/29/2023 12:31:54'!
>= aNumber
	^(aNumber = 1)! !

!classRemoval: #III stamp: 'sinno 3/29/2023 12:32:38'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!
!II class methodsFor: 'private' stamp: 'sinno 3/29/2023 12:35:53' prior: 50609417!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!I class methodsFor: 'nil' stamp: 'sinno 3/29/2023 13:19:21'!
divideTo: aNumber
	^aNumber! !

II / I!

I / II!

II / II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:36'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:36'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:36'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:36'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:36'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:36'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:36'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:37'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:37'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:37'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:37'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:37'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:20:37'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II / III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:41'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:41'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:41'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:41'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:41'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:41'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:41'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:41'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:41'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:20:42'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:42'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:42'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:42'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:42'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:42'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:42'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:20:43'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:43'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:43'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:43'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:43'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:43'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:43'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:20:44'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:44'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:20:44'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:44'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:44'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:20:44'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(1 + (self divideTo: aNumber - self))] ifFalse: [^1].! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:44'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:45'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:20:45'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:20:45'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

III / II!

(aNumber >= (II * self))!

II / III!
!II class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:24:57' prior: 50609517!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !

!classRemoval: #IIIIIII stamp: 'sinno 3/29/2023 13:25:01'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/29/2023 13:25:03'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/29/2023 13:25:07'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/29/2023 13:25:08'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/29/2023 13:25:10'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

II / II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:47'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:47'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:47'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:47'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:47'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:47'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:47'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:47'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:48'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:48'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:48'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:48'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:25:48'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II / III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:52'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:52'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:52'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:52'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:52'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:52'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:52'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:52'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:25:53'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:53'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:53'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:53'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:53'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:53'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:53'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:25:54'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:54'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:54'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:54'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:54'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:54'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:54'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:25:55'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:55'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:25:55'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:55'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:25:55'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	aNumber divideTo: self! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:56'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:56'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:25:56'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:25:56'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II / III !

aNumber >= (II * self)!
!II class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:26:46' prior: 50609403!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !

!classRemoval: #IIIIIII stamp: 'sinno 3/29/2023 13:26:48'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/29/2023 13:26:50'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/29/2023 13:26:51'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/29/2023 13:26:52'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/29/2023 13:26:53'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

II / II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:22'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:22'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:22'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:23'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:23'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:23'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:27:23'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

III / II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:30'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:30'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:30'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:30'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:30'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:30'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:27:31'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:31'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:31'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:31'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:31'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:31'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:31'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:32'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:27:32'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II / III!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:41'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:41'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:41'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:41'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:41'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:42'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:27:42'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:42'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:27:42'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:42'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:42'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:27:42'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	(aNumber >= (II * self)) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:27:43'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:27:43'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !
!II class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:29:21' prior: 50609923!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !

!classRemoval: #IIIIIII stamp: 'sinno 3/29/2023 13:29:45'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'sinno 3/29/2023 13:29:47'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/29/2023 13:29:48'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIII stamp: 'sinno 3/29/2023 13:29:50'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/29/2023 13:29:51'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:00'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:00'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:00'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:00'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:00'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:00'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:00'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:00'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:01'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:01'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:01'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:01'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:30:01'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

II / III!

II / III!

III / II!

III / III!

III / II!

II / II!

II / I!

III + III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:48'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:48'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:48'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:48'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:48'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:48'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:30:49'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:49'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:49'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:49'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:49'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:49'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:49'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:30:49'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:50'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/29/2023 13:30:50'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:50'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:50'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/29/2023 13:30:50'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
divideTo: aNumber
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private' stamp: 'sinno 3/29/2023 13:30:50'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/29/2023 13:30:50'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

IIII / III!

IIII / II!

IIII / I!

IIII / IIIIII!

IIIIII / III!

----SNAPSHOT----(29 March 2023 13:31:20) CuisUniversity-5706.image priorSource: 8876790!

----STARTUP---- (30 March 2023 10:06:27) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


----End fileIn of C:\Users\marti\Downloads\Natural Numbers Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:08:14'!
ERROR!

I/ I!

I/ I!

I/ II!

I/ III!
!I class methodsFor: 'nil' stamp: 'sinno 3/30/2023 10:12:08'!
/ aNumber
	^(aNumber divideTo: self)! !

I/ III!

I/ I!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:13:09'!
PASSED!
!I class methodsFor: 'nil' stamp: 'sinno 3/30/2023 10:26:40'!
- aNumber
	! !
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:27:22' prior: 50611338!
- aNumber
	self error: 'No se puede restar al número I'! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:28:04'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^ 'No se puede restar al número I'! !
!I class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:28:04' prior: 50611342!
- aNumber
	self error: self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:30:32' prior: 50610794!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: 'No se puede dividir por un número más grande'].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:30:51'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número más grande'! !
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:30:52' prior: 50611359!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:31:16' prior: 50611375!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: 'No se puede dividir por un número mas grande'].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !

!methodRemoval: II class #descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor stamp: 'sinno 3/30/2023 10:31:22'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número más grande'!
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:31:36'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número mas grande'! !
!II class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:31:36' prior: 50611386!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !

!classRemoval: #IIIIII stamp: 'sinno 3/30/2023 10:31:45'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #IIIII stamp: 'sinno 3/30/2023 10:31:47'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:32:27' prior: 50610882!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !

!classRemoval: #NaturalNumbersTester stamp: 'sinno 3/30/2023 10:32:56'!
DenotativeObject subclass: #NaturalNumbersTester
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers Tests'!

!classRemoval: #IIII stamp: 'sinno 3/30/2023 10:32:59'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classRemoval: #III stamp: 'sinno 3/30/2023 10:33:00'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

I / II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #III category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:33:21'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:33:21'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:21'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:21'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:22'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número mas grande'! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
previous
	^previous.! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:22'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!III class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:33:22'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:33:25'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:33:25'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:25'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:26'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:33:26'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número mas grande'! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
previous
	^previous.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:33:26'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:33:26'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

----End fileIn of C:\Users\marti\Downloads\Natural Numbers Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:13'!
PASSED!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

!classDefinition: #IIIII category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:34:13'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Numeros Naturales'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Ejercicio Numeros Naturales' stamp: 'sinno 3/30/2023 10:34:13'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:34:13'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:34:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'sinno 3/30/2023 10:34:14'!
"/ aNumber
	(aNumber = I) ifTrue: [^self].
	(self = aNumber) ifTrue: [^I].
	((self > (II*aNumber)) or: (self = (II*aNumber))) ifTrue: [^(I + (self - aNumber / aNumber))] ifFalse: [^I]"
	
/ aNumber
	^(aNumber divideTo: self)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
* aNumber
	^ aNumber + (self previous * aNumber)! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
> aNumber
	(aNumber next = self) ifTrue: [^true] ifFalse: [^(self previous > aNumber)]! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^ 'No se puede dividir por un número mas grande'! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
divideTo: aNumber
	(self > aNumber) ifTrue: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor].
	(self = aNumber) ifTrue: [^I].
	((aNumber - self) >= self) ifTrue: [^(I + (self divideTo: aNumber - self))] ifFalse: [^I].! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
previous
	^previous.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private' stamp: 'sinno 3/30/2023 10:34:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'sinno 3/30/2023 10:34:14'!
>= aNumber
	^((self = aNumber) or: (self > aNumber))! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:34:15'!
PASSED!
!NaturalNumbersTester class methodsFor: 'tests' stamp: 'sinno 3/30/2023 10:35:14' prior: 50611683!
test05SubstractionDoesNotSupportNegativeNumbers

	Assert should: [ I - II ]
		signal: Error
		withDescription: I descripcionDeErrorDeNumerosNegativosNoSoportados.
! !
!NaturalNumbersTester class methodsFor: 'tests' stamp: 'sinno 3/30/2023 10:35:26' prior: 50611724!
test12CanNotDivideByABiggerNumber

	Assert should: [ III /  IIII ]
		signal: Error
		withDescription: II descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.
	
	Assert should: [ I /  II]
		signal: Error
		withDescription: II descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'sinno 3/30/2023 10:35:30'!
PASSED!

----SNAPSHOT----(30 March 2023 10:35:34) CuisUniversity-5706.image priorSource: 8944026!
!II class methodsFor: '--** private fileout/in **--' stamp: 'sinno 3/30/2023 10:35:40' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'sinno 3/30/2023 10:35:40' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'sinno 3/30/2023 10:35:40' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'sinno 3/30/2023 10:35:40' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIII.! !

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'sinno 3/30/2023 10:35:40'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'sinno 3/30/2023 10:35:40'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'sinno 3/30/2023 10:35:40'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	previous := III.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'sinno 3/30/2023 10:35:40'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := IIII.!

----SNAPSHOT----(30 March 2023 10:38:16) CuisUniversity-5706.image priorSource: 8968550!

----STARTUP---- (11 April 2023 23:10:55) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio.st----!

!classRemoval: #CustomerBook stamp: 'sinno 4/11/2023 23:23:10'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/11/2023 23:23:10'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/11/2023 23:23:11'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/11/2023 23:23:11'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio (1).st----!

!methodRemoval: CustomerBookTest #yyy:www:xxx: stamp: 'sinno 4/11/2023 23:24:47'!
yyy: aClosure www: anErrorClosure xxx: typeOfError

	| customerBook |
			
	customerBook := CustomerBook new.

	[aClosure value.
	self fail ]
		on: typeOfError 
		do: anErrorClosure!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:40:19'!
whenDo: aClosure thatFailsWithTypeOfError: typeOfError do: anErrorClosure

	[aClosure value.
	self fail ]
		on: typeOfError 
		do: anErrorClosure! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:41:22' prior: 50612369!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: ''.] thatFailsWithTypeOfError: Error do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/11/2023 23:41:31'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'sinno 4/11/2023 23:41:39'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:43:26' prior: 50612381!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	
	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:43:38'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:44:36' prior: 50612661!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook |
			
	customerBook := CustomerBook new.
	
	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon') ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:44:38'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:44:44'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:45:08'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:45:32' prior: 50612679!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook |
			
	customerBook := CustomerBook new.
	
	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: (customerBook numberOfCustomers = 1).
			self assert: (customerBook includesCustomerNamed: 'John Lennon') ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:45:36'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:46:51' prior: 50612602!
whenDo: aClosure thatFailsWithTypeOfError: typeOfError do: anErrorClosure

	[aClosure value
	self fail ]
		on: typeOfError 
		do: anErrorClosure! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:48:17' prior: 50612703!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook |
			
	customerBook := CustomerBook new.
	
	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:48:23'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:50:58' prior: 50612728!
test04CanNotRemoveAnInvalidCustomer


	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:51:01'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:52:45' prior: 50612745!
test04CanNotRemoveAnInvalidCustomer
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'sinno 4/11/2023 23:52:47'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:53:07' prior: 50612762!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:53:11' prior: 50612801!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ ]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:53:13'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:53:25' prior: 50612815!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:53:27'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:54:15' prior: 50612828!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: 'John Lennon'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/11/2023 23:54:17'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:54:20'!
ERROR!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:54:20'!
ERROR!

self!

self!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:58:57' prior: 50612844!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: 'johnLennon'.

	self whenDo: [customerBook removeCustomerNamed: 'Paul McCartney'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'John Lennon' )]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:58:59'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:59:33' prior: 50612868!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: 'johnLennon'.

	self whenDo: [customerBook removeCustomerNamed: 'Paul McCartney'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'JohnLennon' )]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:59:38'!
FAILURE!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/11/2023 23:59:38'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:00:12' prior: 50612887!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: 'JohnLennon'.

	self whenDo: [customerBook removeCustomerNamed: 'Paul McCartney'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'JohnLennon' )]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/12/2023 00:00:14'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:03:54'!
yyy: active xxx: suspended zzz: total

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:09:13'!
yyy: active xxx: suspended zzz: total kkk: includeOrNot

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:16:02' prior: 50612946!
yyy: active xxx: suspended zzz: total kkk: includeOrNot

	| customerBook |	
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:18:31' prior: 50612469!
whenDo: aClosure yyy: typeOfError www: anErrorClosure

	[aClosure value.
	self fail ]
		on: typeOfError 
		do: anErrorClosure! !

!methodRemoval: CustomerBookTest #whenDo:yyy:www: stamp: 'sinno 4/12/2023 00:19:10'!
whenDo: aClosure yyy: typeOfError www: anErrorClosure

	[aClosure value.
	self fail ]
		on: typeOfError 
		do: anErrorClosure!

!methodRemoval: CustomerBookTest #yyy:xxx:zzz: stamp: 'sinno 4/12/2023 00:19:14'!
yyy: active xxx: suspended zzz: total

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:19:58'!
activeCustomers: active suspendedCustomers: suspended totalCustomers: total
	
	self assert: active equals: self numberOfActiveCustomers.
	self assert: suspended equals: self numberOfSuspendedCustomers
	self assert: total equals: self numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:21:24'!
activeCustomers: active suspendedCustomers: suspended totalCustomers: total inCustomerBook: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !

----SNAPSHOT----(12 April 2023 00:22:17) CuisUniversity-5706.image priorSource: 8970576!

----SNAPSHOT----(12 April 2023 00:23:08) CuisUniversity-5706.image priorSource: 9004251!

----STARTUP---- (12 April 2023 19:48:59) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/12/2023 19:49:38'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/12/2023 19:49:38'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/12/2023 19:49:38'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/12/2023 19:49:38'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio.st----!

----STARTUP---- (12 April 2023 23:55:48) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/12/2023 23:55:55'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/12/2023 23:55:55'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/12/2023 23:55:55'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/12/2023 23:55:55'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio (2).st----!

----STARTUP---- (12 April 2023 23:58:16) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/12/2023 23:58:28'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/12/2023 23:58:28'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/12/2023 23:58:28'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/12/2023 23:58:29'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'sinno 4/12/2023 23:59:39'!
PASSED!

----STARTUP---- (13 April 2023 00:01:18) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 00:01:22'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 00:01:22'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 00:01:22'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 00:01:22'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:22'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:23'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16920235!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:24'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:24'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/9/2023 22:25:52'!
customerAlreadyExistsErrorMessage

	^'Customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/9/2023 22:25:56'!
customerCanNotBeEmptyErrorMessage

	^'Customer name cannot be empty!!!!!!'! !

!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 00:01:25'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 00:01:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'sinno 4/13/2023 00:01:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:01:20'!
activeCustomersEquals: active suspendedCustomersEquals: suspended totalCustomersEquals: total inCustomerBook: customerBook
	
	self assert: active equals: customerBook numberOfActiveCustomers.
	self assert: suspended equals: customerBook numberOfSuspendedCustomers.
	self assert: total equals: customerBook numberOfCustomers.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:14:27'!
checkUniqueCustomerNamed: customer inCustomerBook: customerBook
	
	[ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: customer) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:07:50'!
determineTimeElapsedBy: aClosure andCheckLessThan: aNumber

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aClosure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (aNumber * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:07:21'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self determineTimeElapsedBy: [customerBook addCustomerNamed: 'John Lennon'.] andCheckLessThan: 50.
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:07:21'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed:  'Paul McCartney'.
	
	self determineTimeElapsedBy: [	customerBook removeCustomerNamed: 'Paul McCartney'.
] andCheckLessThan: 100! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/11/2023 23:41:22'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self whenDo: [customerBook addCustomerNamed: ''.] thatFailsWithTypeOfError: Error do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'sinno 4/12/2023 00:00:12'!
test04CanNotRemoveAnInvalidCustomer

	| customerBook |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: 'JohnLennon'.

	self whenDo: [customerBook removeCustomerNamed: 'Paul McCartney'.] thatFailsWithTypeOfError: NotFound do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: 'JohnLennon' )]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:01:20'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self activeCustomersEquals: 0 suspendedCustomersEquals: 1 totalCustomersEquals: 1 inCustomerBook: customerBook.
	
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:01:20'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self activeCustomersEquals: 0 suspendedCustomersEquals: 0 totalCustomersEquals: 0 inCustomerBook: customerBook.
	
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:14:27'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self whenDo: [customerBook suspendCustomerNamed: 'George Harrison'.] thatFailsWithTypeOfError: CantSuspend do: [self checkUniqueCustomerNamed: johnLennon inCustomerBook: customerBook]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mc 4/12/2023 21:14:27'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self whenDo: [ customerBook suspendCustomerNamed: johnLennon.
	self fail ] thatFailsWithTypeOfError: CantSuspend do: [self checkUniqueCustomerNamed: johnLennon inCustomerBook: customerBook]
		
	
! !

----STARTUP---- (13 April 2023 00:01:29) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 00:01:39'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 00:01:40'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 00:01:40'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 00:01:40'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio.st----!

!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 00:02:41'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 00:02:41'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 00:02:41'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 00:02:41'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio (1).st----!

!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 00:04:01'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 00:04:02'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 00:04:02'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 00:04:02'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Downloads\CodigoRepetido-Ejercicio.st----!

----STARTUP---- (13 April 2023 06:38:26) as C:\Users\marti\Desktop\Facultad\Inge 1\cuisUniversity\CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'sinno 4/13/2023 06:38:38'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'sinno 4/13/2023 06:38:39'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'sinno 4/13/2023 06:38:39'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'sinno 4/13/2023 06:38:39'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of C:\Users\marti\Desktop\CodigoRepetido-Ejercicio.st----!

----SNAPSHOT----(13 April 2023 06:39:03) CuisUniversity-5706.image priorSource: 9004341!

----STARTUP---- (18 April 2023 19:18:06) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


----End fileIn of C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\Numero-Exercise.st----!
!NumeroTest methodsFor: 'tests' stamp: 'ma 4/18/2023 19:53:30' prior: 50615977!
test01isCeroReturnsTrueWhenAskToZero
	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'ma 4/18/2023 19:53:38' prior: 50616323!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!Numero methodsFor: 'testing' stamp: 'ma 4/18/2023 19:54:27' prior: 50616190!
isZero

	self subclassResponsibility ! !

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: 'type numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:07:52'!
Object subclass: #Numero
	instanceVariableNames: 'type numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:07:57'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:21:25' prior: 50616302 overrides: 50616333!
isZero

	^value = 0! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:21:31' prior: 50616317 overrides: 50616333!
isZero

	^false! !

Numero new!

Numero new!

Numero new isZero!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:24:43' prior: 50616366 overrides: 50616333!
isZero
	
	^value = 0! !
!NumeroTest methodsFor: 'tests' stamp: 'ma 4/18/2023 20:26:17' prior: 50616328!
test01isCeroReturnsTrueWhenAskToZero

	self assert: 0 isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'ma 4/18/2023 20:26:26' prior: 50616381!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'setup' stamp: 'ma 4/18/2023 20:29:20' prior: 50616077 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Numero with: 1.
	two := Numero with: 2.
	three:= Numero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !
!NumeroTest methodsFor: 'setup' stamp: 'ma 4/18/2023 20:37:21' prior: 50616392 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Numero with: 1.
	two := Numero with: 2.
	three:= Numero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:39:01' overrides: 50616194!
initializeWith: aValue
	
	value := aValue! !
!Entero class methodsFor: 'no messages' stamp: 'ma 4/18/2023 20:40:28' overrides: 50616258!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !

!methodRemoval: Numero class #with: stamp: 'ma 4/18/2023 20:40:41'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue!
!NumeroTest methodsFor: 'setup' stamp: 'ma 4/18/2023 20:42:18' prior: 50616413 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Numero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !
!Fraccion class methodsFor: 'no messages' stamp: 'ma 4/18/2023 20:44:17' overrides: 50616269!
with: aDividend over: aDivisor
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	
	numerator := aDividend // greatestCommonDivisor.
	
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].
	
	^self new initializeWith: numerator over: denominator! !

!methodRemoval: Numero class #with:over: stamp: 'ma 4/18/2023 20:44:26'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator!
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:46:44' overrides: 50616199!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!methodRemoval: Numero #initializeWith: stamp: 'ma 4/18/2023 20:47:31'!
initializeWith: aValue
	
	type := #Entero.
	value := aValue!

!methodRemoval: Numero #initializeWith:over: stamp: 'ma 4/18/2023 20:47:33'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:48:56' overrides: 50616179!
isNegative

	^[denominator < 0 ]! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:49:18' prior: 50616559 overrides: 50616179!
isNegative

	^denominator < 0 ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:49:37' overrides: 50616179!
isNegative
	
	^self < 0 ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:49:58' prior: 50616568 overrides: 50616179!
isNegative
	
	^value < 0 ! !

Numero subclass: #Fraccion
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:50:19'!
Numero subclass: #Fraccion
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:52:21'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:53:29'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'ma 4/18/2023 20:53:39'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 20:55:22' overrides: 50616150!
greatestCommonDivisorWith: anEntero 
	

		^self class with: (value gcd: anEntero integerValue)
! !

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'ma 4/18/2023 20:55:35'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!

self class!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:02:25' overrides: 50616217!
integerValue
	

		^value
! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:02:43' prior: 50616652 overrides: 50616217!
integerValue
	
		^value
! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:05:08' overrides: 50616142!
// aDivisor
	
	^self class with: value // aDivisor integerValue
! !

!methodRemoval: Numero #// stamp: 'ma 4/18/2023 21:05:41'!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:07:08' overrides: 50616110!
* aMultiplier 

		^self class with: value * aMultiplier integerValue
! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:07:38' overrides: 50616110!
* aMultiplier

	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !

!methodRemoval: Numero #* stamp: 'ma 4/18/2023 21:07:46'!
* aMultiplier 

	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	!

----SNAPSHOT----(18 April 2023 21:07:48) CuisUniversity-5706.image priorSource: 9097624!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:08:17' overrides: 50616124!
+ anAdder 

		^self class with: value + anAdder integerValue! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:08:56' overrides: 50616124!
+ anAdder

	[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ]! !

!methodRemoval: Numero #+ stamp: 'ma 4/18/2023 21:09:09'!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	!

----SNAPSHOT----(18 April 2023 21:09:11) CuisUniversity-5706.image priorSource: 9121537!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:15:07' overrides: 50616228!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue] ! !
!Fraccion methodsFor: 'nil' stamp: 'ma 4/18/2023 21:17:25' overrides: 50616228!
= anObject

	^(numerator * anObject denominator) = (denominator * anObject numerator)! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:18:19' prior: 50616744 overrides: 50616228!
= anObject

	^(anObject isKindOf: self class) and: [(numerator * anObject denominator) = (denominator * anObject numerator)]! !
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:18:29' prior: 50616738 overrides: 50616228!
= anObject

	^(anObject isKindOf: self class) and: [value = anObject integerValue] ! !

!methodRemoval: Numero #= stamp: 'ma 4/18/2023 21:18:58'!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]!

----SNAPSHOT----(18 April 2023 21:19:10) CuisUniversity-5706.image priorSource: 9122694!
!Fraccion methodsFor: 'nil' stamp: 'ma 4/18/2023 21:19:26' overrides: 50616214!
denominator

	^denominator! !

!methodRemoval: Numero #denominator stamp: 'ma 4/18/2023 21:19:30'!
denominator

	^denominator!
!Fraccion methodsFor: 'nil' stamp: 'ma 4/18/2023 21:19:40' overrides: 50616224!
numerator

	^numerator! !

!methodRemoval: Numero #numerator stamp: 'ma 4/18/2023 21:19:46'!
numerator

	^numerator!

!methodRemoval: Numero #isZero stamp: 'ma 4/18/2023 21:19:48'!
isZero

	self subclassResponsibility !
!Entero methodsFor: 'nil' stamp: 'ma 4/18/2023 21:20:14' overrides: 50616185!
isOne

	^value = 1 ! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:20:27' overrides: 50616185!
isOne

	^false! !

!methodRemoval: Numero #isOne stamp: 'ma 4/18/2023 21:20:43'!
isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].!

!methodRemoval: Numero #integerValue stamp: 'ma 4/18/2023 21:21:15'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value!

!methodRemoval: Numero #isNegative stamp: 'ma 4/18/2023 21:21:30'!
isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:21:45' overrides: 50616158!
negated
	
		^self * (self class with: -1)
! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:22:07' overrides: 50616158!
negated

	^self class with: numerator * (self class with: -1) over: denominator! !

!methodRemoval: Numero #negated stamp: 'ma 4/18/2023 21:22:12'!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:23:00' overrides: 50616167!
printOn: aStream
	
		aStream print: value 
! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:23:27' overrides: 50616167!
printOn: aStream
	
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !

!methodRemoval: Numero #printOn: stamp: 'ma 4/18/2023 21:23:31'!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].!

!methodRemoval: Numero #type stamp: 'ma 4/18/2023 21:23:47'!
type
	
	^type!
!Entero methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:24:03' overrides: 50616239!
hash
 	^value hash! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'ma 4/18/2023 21:24:37' overrides: 50616239!
hash
	^(numerator hash / denominator hash) hash ! !

!methodRemoval: Numero #hash stamp: 'ma 4/18/2023 21:24:57'!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].!
!NumeroTest methodsFor: 'setup' stamp: 'ma 4/18/2023 21:25:39' prior: 50616460 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 21:25:45'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'ma 4/18/2023 21:25:45'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 21:25:45'!
FAILURE!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 21:25:45'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 21:25:45'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 21:25:45'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 21:25:45'!
ERROR!

----End fileIn of C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\Numeros-Ejercicio.st----!

!classRemoval: #Fraccion stamp: 'ma 4/18/2023 22:57:13'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'ma 4/18/2023 22:57:13'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'ma 4/18/2023 22:57:14'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'ma 4/18/2023 22:57:14'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/18/2023 23:00:38'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/18/2023 23:00:38'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/18/2023 23:00:38'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 23:00:39'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 23:00:39'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/18/2023 23:03:44'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/18/2023 23:03:44'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/18/2023 23:03:44'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 23:03:45'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 23:03:45'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 23:03:45'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/18/2023 23:03:56'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:03:57'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:03:57'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/18/2023 23:03:57'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 23:03:57'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 23:03:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 23:03:57'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:04:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:05:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:05:30'!
PASSED!

self class with: value!

anAdder integerValue!

value!

value + anAdder integerValue!

----SNAPSHOT----(18 April 2023 23:16:43) CuisUniversity-5706.image priorSource: 9123964!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/18/2023 23:21:55'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 23:21:55'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 23:21:55'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:17'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:17'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/18/2023 23:22:25'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/18/2023 23:22:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/18/2023 23:22:25'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:22:28'!
ERROR!

anAdder!

Numero isKindOf: Numero!

Numero isKindOf: Entero!

Entero isKindOf: Numero!

Entero isKindOf: Numero!

Entero isKindOf: Fraccion!

self class!

Entero isKindOf: Numero!

Entero isKindOf: Numero!

self class!

self class!

aClass!

Entero isKindOf: Entero!

self class!

aClass!

Entero isKindOf: #Numero!

Entero isKindOf: #Entero!

Entero isKindOf: #Entero!

Entero isKindOf: #Entero!

aClass!

Entero isKindOf: Entero class!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:37:32'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:37:32'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/18/2023 23:41:58' prior: 50618007 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	
	
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:42:04'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:42:04'!
FAILURE!

self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)!

one + oneFifth!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/18/2023 23:48:14' prior: 50618965 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue].
		
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/18/2023 23:49:50' prior: 50618981 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[^ 'no se puede flaco']
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:49:55'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/18/2023 23:49:55'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/18/2023 23:51:36' prior: 50618989 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[
			]
! !

----SNAPSHOT----(18 April 2023 23:51:40) CuisUniversity-5706.image priorSource: 9184297!
!NumeroTest methodsFor: 'nil' stamp: 'ma 4/18/2023 23:52:15'!
test
	one + one! !

!testRun: #NumeroTest #test stamp: 'ma 4/18/2023 23:52:22'!
PASSED!

!methodRemoval: NumeroTest #test stamp: 'ma 4/18/2023 23:53:09'!
test
	one + one!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/18/2023 23:55:06' prior: 50619004 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[^anAdder class with: 1 over: 1]
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:00:38' prior: 50619022 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := self integerValue  * anAdder denominator + anAdder numerator.
			newDenominator := anAdder denominator.
				
			^anAdder class with: newNumerator over: newDenominator. ]
! !

----SNAPSHOT----(19 April 2023 00:00:40) CuisUniversity-5706.image priorSource: 9195520!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:00:52'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:00:52'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:01:30' prior: 50619031 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self integerValue  * anAdder denominator) + anAdder numerator.
			newDenominator := anAdder denominator.
				
			^anAdder class with: newNumerator over: newDenominator. ]
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:01:34'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:01:34'!
ERROR!

newNumerator!

self integerValue  * anAdder denominator!

anAdder denominator!

self integerValue!

super * aNumber!

anAdder denominator!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:04:38' prior: 50619055 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self  * anAdder denominator) + anAdder numerator.
			newDenominator := anAdder denominator.
				
			^anAdder class with: newNumerator over: newDenominator. ]
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:05:52' prior: 50619080 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self integerValue * (anAdder denominator) integerValue ) + anAdder numerator.
			newDenominator := anAdder denominator.
				
			^anAdder class with: newNumerator over: newDenominator. ]
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:14'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:14'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:06:40' prior: 50619095 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue: 
		[^self class with: value + anAdder integerValue]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self * anAdder denominator) + anAdder numerator.
			newDenominator := anAdder denominator.
				
			^anAdder class with: newNumerator over: newDenominator. ]
! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:44'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:06:51'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 00:06:51'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:06:51'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:06:52'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:06:52'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 00:06:52'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 00:06:52'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 00:06:52'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 00:06:52'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:08:22' prior: 50618129 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue:
	
	[	| newNumerator newDenominator |
	
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^newNumerator / newDenominator. ]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:09:22' prior: 50619270 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue:
		
		[| newNumerator newDenominator |
	
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^newNumerator / newDenominator. ]
	
	ifFalse: []! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:09:26' prior: 50619283 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue:
		
		[| newNumerator newDenominator |
	
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ newNumerator / newDenominator. ]
	
	ifFalse: []! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:10:03' prior: 50619296 overrides: 50617936!
+ anAdder 
	
	(anAdder isKindOf: self class) ifTrue:
		
		[| newNumerator newDenominator |
	
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ newNumerator / newDenominator. ]
	
	ifFalse: [^ anAdder + self. ]! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:10:29'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:10:32'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:10:32'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:10:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 00:10:33'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:10:33'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:10:33'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 00:10:33'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 00:10:33'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 00:10:33'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 00:10:33'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:11:41' prior: 50618001 overrides: 50617931!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: 
	
		[^self class with: value * aMultiplier integerValue. ]
	ifFalse: 
		[]
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:12:52' prior: 50619462 overrides: 50617931!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]
	ifFalse: 
		[^aMultiplier class with: (1) over: aMultiplier denominator. ]
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:14:27' prior: 50619470 overrides: 50617931!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]
	ifFalse: 
		[^aMultiplier class with: (value * (aMultiplier numerator) integerValue) over: aMultiplier denominator. ]
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:14:52'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:14:52'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 00:14:52'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 00:14:53'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:14:53'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:14:53'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 00:14:53'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 00:14:53'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 00:14:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 00:14:53'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:14:57'!
ERROR!

newNumerator!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:19:34' prior: 50619480 overrides: 50617931!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]
	ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:19:37'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:19:37'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 00:19:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 00:19:38'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:19:38'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:19:38'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 00:19:38'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 00:19:38'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 00:19:38'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 00:19:38'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:20:35' prior: 50618122 overrides: 50617931!
* aMultiplier 

	(aMultiplier isKindOf: self class) ifTrue:	
		[^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	ifFalse: 
		[]
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 00:20:56' prior: 50619778 overrides: 50617931!
* aMultiplier 

	(aMultiplier isKindOf: self class) ifTrue:	
		[^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	ifFalse: 
		[^ aMultiplier * self]
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 00:21:00'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 00:21:00'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 00:21:00'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 00:21:00'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 00:21:00'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 00:21:01'!
PASSED!

----SNAPSHOT----(19 April 2023 00:21:09) CuisUniversity-5706.image priorSource: 9196605!

----SNAPSHOT----(19 April 2023 00:21:12) CuisUniversity-5706.image priorSource: 9224986!

----STARTUP---- (19 April 2023 17:08:35) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:11:40'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:11:40'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:11:40'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:11:40'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:11:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:11:40'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:21:08' prior: 50618019 overrides: 50617945!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue:
		[^ Fraccion with: self over: aDivisor. ]
	ifFalse: 
		[^ self]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:22:40' prior: 50620078 overrides: 50617945!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue:
		[^ Fraccion with: self over: aDivisor. ]
	ifFalse: 
		[^ self * (Fraccion with: aDivisor denominator over: aDivisor numerator)]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:23:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:23:06'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:23:06'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:23:06'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:23:06'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:23:06'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:23:06'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:26:41'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:26:41'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:26:41'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:26:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:26:42'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:26:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:26:42'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:28:01' prior: 50618151 overrides: 50617945!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue:	
		[^ (numerator * aDivisor denominator) / (denominator * aDivisor numerator). ]
	ifFalse: 
		[^ 1]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:30:10' prior: 50620368 overrides: 50617945!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue:	
		[^ (numerator * aDivisor denominator) / (denominator * aDivisor numerator). ]
	ifFalse: 
		[^ self * (Fraccion with: (Entero with: 1) over: aDivisor). ]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:30:26'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:30:27'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:30:27'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:30:27'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:30:27'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:30:27'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:31:43' prior: 50618013 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse:
		[^1]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:32:03' prior: 50620377 overrides: 50617945!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue:	
		[^ (numerator * aDivisor denominator) / (denominator * aDivisor numerator). ]
	ifFalse: 
		[^ self * (self class with: (Entero with: 1) over: aDivisor). ]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:32:06'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:32:07'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:32:07'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:32:07'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:32:07'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:32:07'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:34:15' prior: 50620524 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse:
		[^ self class with: value + Fraccion with: 1 ]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:36:25' prior: 50620679 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse:
		[^ self class with: value + Fraccion with: (aSubtrahend numerator integerValue ) ]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:36:37' prior: 50620689 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse:
		[^ self class with: value + Fraccion with: -1]! !

-3!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:37:23' prior: 50620700 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse:
		[^ self class with: value + Fraccion with: (aSubtrahend numerator) ]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:39:41' prior: 50620710 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self * aSubtrahend denominator) + aSubtrahend numerator.
			newDenominator := aSubtrahend denominator.
				
			^aSubtrahend class with: newNumerator over: newDenominator. ]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:39:46' prior: 50620720 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse: 
		[	| newNumerator newDenominator |
			
			newNumerator  := (self * aSubtrahend denominator) - aSubtrahend numerator.
			newDenominator := aSubtrahend denominator.
				
			^aSubtrahend class with: newNumerator over: newDenominator. ]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:40:55'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:40:56'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:40:56'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:40:56'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:41:34'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:41:34'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:41:35'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:41:35'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:41:35'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:41:35'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:41:35'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:41:55'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:42:10'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:42:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:42:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:42:16'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:43:47' prior: 50618140 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
	
		[| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator. ]
	ifFalse:
		[]
! !

DoIt


|i|

i := 3
-i!

|i|

i := 3
i negated !

DoIt

|i|

i := 3
i negated 
^ i!

3 negated!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:52:36'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:52:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:52:37'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:53:55' prior: 50621175 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
	
		[| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator. ]
	ifFalse:
		[^ self]
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:55:36' prior: 50621331 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
	
		[| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator. ]
	ifFalse:
		[^ self + aSubtrahend class with: (aSubtrahend integerValue negated)]
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:55:44'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:55:45'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:55:45'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:55:45'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 17:56:16' prior: 50621345 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
	
		[| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator. ]
	ifFalse:
		[^ self + (aSubtrahend class with: (aSubtrahend integerValue negated))]
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 17:56:18'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 17:56:19'!
PASSED!

----SNAPSHOT----(19 April 2023 17:58:15) CuisUniversity-5706.image priorSource: 9225076!

----SNAPSHOT----(19 April 2023 17:58:20) CuisUniversity-5706.image priorSource: 9280002!

----STARTUP---- (19 April 2023 18:00:20) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 18:00:24'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 18:00:25'!
PASSED!

----SNAPSHOT----(19 April 2023 18:01:03) CuisUniversity-5706.image priorSource: 9280092!

----STARTUP---- (19 April 2023 20:08:56) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:10:24'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 20:10:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 20:10:25'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:20:19' overrides: 50617955!
negated

	^self class with: numerator * (Entero with: -1) over: denominator.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:21:13' overrides: 50617955!
negated

	^self * (self class with: -1)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:22:41' prior: 50620735 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse: 
		"[	| newNumerator newDenominator |
			
			newNumerator  := (self * aSubtrahend denominator) - aSubtrahend numerator.
			newDenominator := aSubtrahend denominator.
				
			^aSubtrahend class with: newNumerator over: newDenominator. ]"
		[^ self + aSubtrahend negated]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:22:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 20:22:44'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 20:22:44'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:23:01' prior: 50621951 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self class with: value - aSubtrahend integerValue. ]
	ifFalse: 
		[^ self + aSubtrahend negated]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:23:40' prior: 50621500 overrides: 50617940!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue:
		[^ self + aSubtrahend negated. ]
	ifFalse:
		[^ self + (aSubtrahend class with: (aSubtrahend integerValue negated))]
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:23:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:23:44'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 20:23:44'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 20:23:44'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:27:36'!
multiplyEntero: aEnteroMultiplier 
	
	[^self class with: value * aEnteroMultiplier integerValue. ]
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:27:54' prior: 50622258!
multiplyEntero: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:30:34' prior: 50619631 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		aMultiplier multiply: self

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:30:45'!
multiply: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	! !

!methodRemoval: Entero #multiplyEntero: stamp: 'ma 4/19/2023 20:30:49'!
multiplyEntero: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:31:21'!
multiply: aMultiplier 

	[^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:31:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:31:25'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:33:31'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:33:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:33:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:33:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:33:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:33:31'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:33:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:33:32'!
FAILURE!
!Numero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:34:39'!
multiply: aNumber

	self subclassResponsibility ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:34:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:34:43'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:35:49' prior: 50622272 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		self halt.
		aMultiplier multiply: self

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:37:14' prior: 50622694 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		self halt.
		^ aMultiplier multiply: self

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:37:26' prior: 50622294 overrides: 50622559!
multiply: aMultiplier 

	^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:38:24' prior: 50619787 overrides: 50617931!
* aMultiplier 

	"(aMultiplier isKindOf: self class) ifTrue:	
		[^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	ifFalse: 
		[^ aMultiplier * self]"
		
		^aMultiplier multiply: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:39:19' prior: 50622707 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		"self halt."
		^ aMultiplier multiply: self

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 20:39:21'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:39:39'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:39:55'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:40:02'!
ERROR!

aMultiplier!

aMultiplier!

----SNAPSHOT----(19 April 2023 20:46:24) CuisUniversity-5706.image priorSource: 9284659!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:54:00'!
multiplyAEntero: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:54:19'!
multiplyAFraccion: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:55:03' prior: 50622906!
multiplyAFraccion: aFraccionMultiplier 
	
	^aFraccionMultiplier class with: (self * aFraccionMultiplier numerator) over: aFraccionMultiplier denominator. 
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:55:20' prior: 50622739 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		"self halt."
		^ aMultiplier multiplyAEntero: self

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:55:34' prior: 50622728 overrides: 50617931!
* aMultiplier 

	"(aMultiplier isKindOf: self class) ifTrue:	
		[^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	ifFalse: 
		[^ aMultiplier * self]"
		
		^aMultiplier multiplyAFraccion: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:55:45'!
multiplyAFraccion: aMultiplier 

	^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:55:51'!
multiplyAEntero: aMultiplier 

	^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:56:12' prior: 50622952!
multiplyAEntero: aMultiplier 

	^ aMultiplier * self. 
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:56:17'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:56:36' prior: 50622935 overrides: 50617931!
* aMultiplier 

	"(aMultiplier isKindOf: self class) ifTrue:	
		[^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). ]
	ifFalse: 
		[^ aMultiplier * self]"
		
	^aMultiplier multiplyAFraccion: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:56:43' prior: 50622922 overrides: 50617931!
* aMultiplier 
	
	"(aMultiplier isKindOf: self class) ifTrue: 
		[^self class with: value * aMultiplier integerValue. ]"
		
		"self halt."
	^ aMultiplier multiplyAEntero: self.

	"ifFalse: 
		[^aMultiplier class with: (self * aMultiplier numerator) over: aMultiplier denominator. ]"
	! !

----SNAPSHOT----(19 April 2023 20:56:54) CuisUniversity-5706.image priorSource: 9319881!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:56:56'!
PASSED!

aMultiplier!

aMultiplier!

aMultiplier!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 20:59:05' prior: 50622959!
multiplyAEntero: aMultiplier 

	^ self class with: (aMultiplier * self numerator) over: self denominator. 
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 20:59:09'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 20:59:09'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:00:32' prior: 50623070!
multiplyAEntero: aMultiplier 

	^ aMultiplier multiplyAFraccion: self
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:00:34'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:00:35'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:00:35'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:05:01' prior: 50623015 overrides: 50617931!
* aMultiplier 
	
	^ aMultiplier multiplyAEntero: self.

	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:05:07' prior: 50623004 overrides: 50617931!
* aMultiplier 

	^aMultiplier multiplyAFraccion: self
	! !

----SNAPSHOT----(19 April 2023 21:05:09) CuisUniversity-5706.image priorSource: 9324031!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:05:47'!
addAEntero: anAdder 
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:06:31'!
addAFraccion: aFraccionAdder 
	
	| newNumerator newDenominator |
			
	newNumerator  := (self * aFraccionAdder denominator) + aFraccionAdder numerator.
	newDenominator := aFraccionAdder denominator.
		
	^aFraccionAdder class with: newNumerator over: newDenominator. 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:06:51' prior: 50623369!
addAEntero: aEnteroAdder 
	
	^self class with: value + aEnteroAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:07:04' prior: 50619117 overrides: 50617936!
+ anAdder 
	
	anAdder addAEntero: self
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:07:48'!
addAEntero: anAdder 
	
	^ anAdder addAFraccion: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:08:18'!
addAFraccion: aFraccionAdder 

	| newNumerator newDenominator |

	newNumerator := (numerator * aFraccionAdder denominator) + (denominator * aFraccionAdder numerator).
	newDenominator := denominator * aFraccionAdder denominator.
	
	^ newNumerator / newDenominator. 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:08:34' prior: 50619309 overrides: 50617936!
+ anAdder 
	
	anAdder addAFraccion: self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 21:08:38'!
FAILURE!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:08:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:08:56'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:09:11'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:09:35'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:09:35'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:10:48'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:10:48'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:11:06'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:11:35' prior: 50623386!
addAEntero: aEnteroAdder 
	
	self halt.
	^self class with: value + aEnteroAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:11:42'!
PASSED!

aEnteroAdder!

aValue!

^self class with: value + aEnteroAdder integerValue!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:13:48' prior: 50623393 overrides: 50617936!
+ anAdder 
	
	^ anAdder addAEntero: self
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:13:55' prior: 50623414 overrides: 50617936!
+ anAdder 
	
	^ anAdder addAFraccion: self.! !

!methodRemoval: Fraccion #multiply: stamp: 'ma 4/19/2023 21:14:04'!
multiply: aMultiplier 

	^ (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator). 
	!

!methodRemoval: Entero #multiply: stamp: 'ma 4/19/2023 21:14:07'!
multiply: aEnteroMultiplier 
	
	^self class with: value * aEnteroMultiplier integerValue. 
	!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:14:09'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:14:10'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:14:10'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:14:31' prior: 50623577!
addAEntero: aEnteroAdder 
	
	^self class with: value + aEnteroAdder integerValue
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:33'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:14:34'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:14:34'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:17:14'!
substractFromEntero: aEntero
	
	^ self class with: value - aEntero integerValue. ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:17:49' prior: 50623940!
substractFromEntero: aEntero
	
	^ (self class with: value - aEntero integerValue) negated ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:17:54' prior: 50623946!
substractFromEntero: aEntero
	
	^ (self class with: value - aEntero integerValue) negated. ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:18:47'!
substractFromFraccion: aFraccion 
	
	^ (self + aFraccion negated) negated.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:19:06' prior: 50623958!
substractFromFraccion: aFraccion 
	
	^ (self addAFraccion: aFraccion negated) negated.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:20:17'!
substractFromEntero: aEntero 
	
	^ (self + (aEntero class with: (aEntero integerValue negated))) negated
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:20:56'!
substractFromFraccion: aFraccion 
	
	^ (self addAFraccion: aFraccion negated) negated. 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:21:35' prior: 50622113 overrides: 50617940!
- aSubtrahend 
	
	^ aSubtrahend substractFromFraccion: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 21:21:53' prior: 50622104 overrides: 50617940!
- aSubtrahend 
	
	^ aSubtrahend substractFromEntero: self.! !

----SNAPSHOT----(19 April 2023 21:21:55) CuisUniversity-5706.image priorSource: 9334874!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 21:21:58'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 22:33:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 22:33:25'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:35:32'!
divideFromEntero: aDivisorEntero 
	
	^ Fraccion with: aDivisorEntero over: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:43:31'!
divideFromFraccion: aDivisorFraccion 
	
	|one|
	one := Entero with: 1.
	
	^ aDivisorFraccion  * (Fraccion with: one over: self).! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:44:23' prior: 50624274!
divideFromFraccion: aDivisorFraccion 
	
	|one|
	one := Entero with: 1.
	
	^ aDivisorFraccion  multiplyAFraccion: (Fraccion with: one over: self).! !
!Entero methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:45:12' prior: 50620086 overrides: 50617945!
/ aDivisor 
	
	^ aDivisor divideFromEntero: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:47:10'!
divideFromEntero: aDivisorEntero 

	^ aDivisorEntero * (Fraccion with: self denominator over: self numerator). ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:47:21' prior: 50624295!
divideFromEntero: aDivisorEntero 

	^ aDivisorEntero multiplyAFraccion: (Fraccion with: self denominator over: self numerator). ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:48:16'!
divideFromFraccion: aDivisorFraccion

	^ self. ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:48:41' prior: 50624309!
divideFromFraccion: aDivisorFraccion

	^ aDivisorFraccion multiplyAFraccion: (Fraccion with: self denominator over: self numerator). ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:49:09' prior: 50620532 overrides: 50617945!
/ aDivisor 

	^ aDivisor  divideFromFraccion:  self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:49:15'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 22:49:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 22:49:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:49:26'!
ERROR!

aDivisorFraccion!

aMultiplier!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:53:43' prior: 50624314!
divideFromFraccion: aDivisorFraccion

	"^ aDivisorFraccion multiplyAFraccion: (Fraccion with: self denominator over: self numerator). "
	^(aDivisorFraccion numerator multiplyAEntero: self denominator) / (aDivisorFraccion denominator multiplyAEntero: self numerator )! !

----SNAPSHOT----(19 April 2023 22:53:47) CuisUniversity-5706.image priorSource: 9354973!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 22:53:52'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 22:53:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 22:53:53'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'ma 4/19/2023 22:54:07' prior: 50624467!
divideFromFraccion: aDivisorFraccion

	^(aDivisorFraccion numerator multiplyAEntero: self denominator) / (aDivisorFraccion denominator multiplyAEntero: self numerator )! !

----SNAPSHOT----(19 April 2023 22:59:20) CuisUniversity-5706.image priorSource: 9370477!

Entero subclass: #Negativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:09:09'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:09:17'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:09:45'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #MayorUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #MayorUno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:10:39'!
Entero subclass: #MayorUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'ma 4/19/2023 23:12:56' prior: 50618098!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^self new initalizeWith: aValue"
	
	(aValue < 0) ifTrue: [^ Negativo new initializeWith: aValue].! !

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:14:44'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:14:48'!
Entero subclass: #Cero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #MayorUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #MayorUno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:14:55'!
Entero subclass: #MayorUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Negativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:14:58'!
Entero subclass: #Negativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:15:01'!
Entero subclass: #Uno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #MayorUno stamp: 'ma 4/19/2023 23:15:42'!
Entero subclass: #MayorUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #MayorQueUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #MayorQueUno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:15:54'!
Entero subclass: #MayorQueUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #MayorQueUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #MayorQueUno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:15:58'!
Entero subclass: #MayorQueUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'ma 4/19/2023 23:17:00' prior: 50624677!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^self new initalizeWith: aValue"
	
	(aValue < 0) ifTrue: [^ Negativo new initializeWith: aValue].
	(aValue = 0) ifTrue: [^ Cero new initializeWith: aValue].
	(aValue = 1) ifTrue: [^ Uno new initializeWith: aValue].
	(aValue > 1) ifTrue: [^ MayorQueUno new initializeWith: aValue].! !

!methodRemoval: Entero #initalizeWith: stamp: 'ma 4/19/2023 23:18:19'!
initalizeWith: aValue 
	
	value := aValue!
!Cero methodsFor: 'nil' stamp: 'ma 4/19/2023 23:18:24'!
initalizeWith: aValue 
	
	value := aValue! !
!MayorQueUno methodsFor: 'nil' stamp: 'ma 4/19/2023 23:18:27'!
initalizeWith: aValue 
	
	value := aValue! !
!Negativo methodsFor: 'nil' stamp: 'ma 4/19/2023 23:18:30'!
initalizeWith: aValue 
	
	value := aValue! !
!Uno methodsFor: 'nil' stamp: 'ma 4/19/2023 23:18:33'!
initalizeWith: aValue 
	
	value := aValue! !

Cero new initalizeWith: 0!

Cero new initalizeWith: 0!

Cero new initalizeWith: 0!

Cero new initializeWith: aValue!

aValue!

Cero new!
!Cero class methodsFor: 'nil' stamp: 'ma 4/19/2023 23:24:45'!
initializeWith: a
	^ self error: 'caca'! !

!methodRemoval: Cero class #initializeWith: stamp: 'ma 4/19/2023 23:26:45'!
initializeWith: a
	^ self error: 'caca'!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:26:53'!
initializeWith: aValue 
	
	value := aValue! !

!methodRemoval: Cero #initalizeWith: stamp: 'ma 4/19/2023 23:26:55'!
initalizeWith: aValue 
	
	value := aValue!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:27:03'!
initializeWith: aValue 
	
	value := aValue! !

!methodRemoval: MayorQueUno #initalizeWith: stamp: 'ma 4/19/2023 23:27:04'!
initalizeWith: aValue 
	
	value := aValue!
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:27:37'!
initializeWith: aValue 
	
	value := aValue! !

!methodRemoval: Negativo #initalizeWith: stamp: 'ma 4/19/2023 23:27:39'!
initalizeWith: aValue 
	
	value := aValue!
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:27:43'!
initializeWith: aValue 
	
	value := aValue! !

!methodRemoval: Uno #initalizeWith: stamp: 'ma 4/19/2023 23:27:44'!
initalizeWith: aValue 
	
	value := aValue!

----SNAPSHOT----(19 April 2023 23:27:47) CuisUniversity-5706.image priorSource: 9375211!

value!
!Entero methodsFor: 'testing' stamp: 'ma 4/19/2023 23:29:12' prior: 50618072 overrides: 50617959!
isNegative
	
	^ self subclassResponsibility ! !
!Cero methodsFor: 'nil' stamp: 'ma 4/19/2023 23:29:37' overrides: 50624859!
isNegative
	^ false! !
!MayorQueUno methodsFor: 'nil' stamp: 'ma 4/19/2023 23:29:48' overrides: 50624859!
isNegative
	^ false! !
!Negativo methodsFor: 'nil' stamp: 'ma 4/19/2023 23:29:57' overrides: 50624859!
isNegative
	^ true! !
!Uno methodsFor: 'nil' stamp: 'ma 4/19/2023 23:30:08' overrides: 50624859!
isNegative
	^ false! !

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:31:46'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #MayorQueUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #MayorQueUno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:31:49'!
Entero subclass: #MayorQueUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:31:53'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:31:56'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'ma 4/19/2023 23:32:04'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 23:32:26'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 23:32:27'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 23:32:27'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:33:25' overrides: 50618029!
fibonacci

	| one|
	
	one := Entero with: 1.
	
	^one! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:33:35' prior: 50625074 overrides: 50618029!
fibonacci
	
	^Entero with: 1.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:33:44' prior: 50625080 overrides: 50618029!
fibonacci
	
	^Uno with: 1.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:33:54' prior: 50625085 overrides: 50618029!
fibonacci
	
	^Entero with: 1.! !
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:34:05' overrides: 50618029!
fibonacci
	
	^Entero with: 1.! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:34:43' overrides: 50618029!
fibonacci

	^self error: Entero negativeFibonacciErrorDescription
	
		! !
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:35:07' overrides: 50618029!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:10'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 23:35:11'!
PASSED!

!methodRemoval: Entero #fibonacci stamp: 'ma 4/19/2023 23:35:19'!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:21'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/19/2023 23:35:22'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/19/2023 23:35:22'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:36:52'!
imANumerator

	! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:37:32'!
imADenominator

	^self error: self canNotDivideByZeroErrorDescription

	! !

!methodRemoval: Cero #imANumerator stamp: 'ma 4/19/2023 23:37:36'!
imANumerator

	!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/19/2023 23:40:00' prior: 50618217!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor imADenominator 
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/19/2023 23:40:06' prior: 50625405!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor imADenominator .
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/19/2023 23:40:24'!
imANumerator

	^self

	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/19/2023 23:46:10' prior: 50625424!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor ^self error: self canNotDivideByZeroErrorDescription.
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Entero class methodsFor: 'instance creation' stamp: 'ma 4/19/2023 23:46:23' prior: 50624774!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue < 0) ifTrue: [^ Negativo new initializeWith: aValue].
	(aValue = 0) ifTrue: [^ Cero new initializeWith: aValue].
	(aValue = 1) ifTrue: [^ Uno new initializeWith: aValue].
	(aValue > 1) ifTrue: [^ MayorQueUno new initializeWith: aValue].! !

Cero class!

Cero class thisclass!

Cero subclasses!

Cero class subclasses!

Entero class subclasses!

Entero class subclasses !

Entero class subclasses at: 0!

Entero class subclasses at: 1!

Entero class subclasses at: 1!

e := Entero class subclasses at: 1!

e!

e!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/19/2023 23:59:53' prior: 50625447!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Cero methodsFor: 'nil' stamp: 'ma 4/20/2023 00:02:35'!
youAreDivisorAndWithDividend: aDividend
	^ self.! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:04:09' prior: 50625493!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	"aDividend isZero ifTrue: [ ^aDividend ]."
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:04:51'!
divide: aDividend
	^ self.! !

!methodRemoval: Cero #youAreDivisorAndWithDividend: stamp: 'ma 4/20/2023 00:04:53'!
youAreDivisorAndWithDividend: aDividend
	^ self.!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:07:12' prior: 50625518!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !

!methodRemoval: Cero #divide: stamp: 'ma 4/20/2023 00:07:19'!
divide: aDividend
	^ self.!

!methodRemoval: Cero #imADenominator stamp: 'ma 4/20/2023 00:14:20'!
imADenominator

	^self error: self canNotDivideByZeroErrorDescription

	!

!methodRemoval: Cero #imANumerator stamp: 'ma 4/20/2023 00:14:21'!
imANumerator

	^self

	!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:19:02' prior: 50625547!
with: aDividend over: aDivisor

	|greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	^aDivisor thatDivides: aDividend withGcd: greatestCommonDivisor.

	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"
	! !
!Cero methodsFor: 'nil' stamp: 'ma 4/20/2023 00:20:01'!
thatDivides: aDividend withGcd: gcd! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:20:20' prior: 50625603!
thatDivides: aDividend withGcd: gcd
	^ self error: Fraccion canNotDivideByZeroErrorDescription.! !
!Uno methodsFor: 'nil' stamp: 'ma 4/20/2023 00:20:33'!
thatDivides: aDividend withGcd: gcd
	^ aDividend. ! !
!MayorQueUno methodsFor: 'nil' stamp: 'ma 4/20/2023 00:21:31'!
thatDivides: aDividend withGcd: gcd
	^ aDividend thatIsDividedBy: self.! !
!Negativo methodsFor: 'nil' stamp: 'ma 4/20/2023 00:22:30'!
thatDivides: aDividend withGcd: gcd
	^ (aDividend negated) thatIsDividedBy: self negated.! !
!Cero methodsFor: 'nil' stamp: 'ma 4/20/2023 00:23:13'!
thatIsDividedBy: aDivisor
	^ Entero with: 0.! !
!MayorQueUno methodsFor: 'nil' stamp: 'ma 4/20/2023 00:23:44'!
thatIsDividedBy: aDivisor
	! !
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:24:59'!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self // gcd.
	denominator := aDivisor // gcd.

	^Fraccion initializeWith: numerator over: denominator.
	! !

!methodRemoval: MayorQueUno #thatIsDividedBy: stamp: 'ma 4/20/2023 00:25:22'!
thatIsDividedBy: aDivisor
	!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:26:17'!
thatIsDividedBy: aDivisor withGcd: gcd
	^ Entero with: 0.! !
!Negativo methodsFor: 'nil' stamp: 'ma 4/20/2023 00:26:31'!
thatIsDividedBy: aDivisor withGcd: gcd
	^ Entero with: 0.! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:26:49' prior: 50625650!
thatIsDividedBy: aDivisor withGcd: gcd
! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:27:02' prior: 50625655!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self // gcd.
	denominator := aDivisor // gcd.

	^Fraccion initializeWith: numerator over: denominator.! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:27:20' prior: 50625660!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self  // gcd.
	denominator := aDivisor // gcd.

	^Fraccion initializeWith: numerator over: denominator.! !

!methodRemoval: Cero #thatIsDividedBy: stamp: 'ma 4/20/2023 00:27:55'!
thatIsDividedBy: aDivisor
	^ Entero with: 0.!
!Uno methodsFor: 'nil' stamp: 'ma 4/20/2023 00:28:48'!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion initializeWith: (Numero with: 1) over: aDivisor.! !
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:28:57' prior: 50625681!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion initializeWith: self over: aDivisor.! !

aDividend!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:29:27' prior: 50625616!
thatDivides: aDividend withGcd: gcd
	^ aDividend thatIsDividedBy: self withGcd: gcd! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:29:54' prior: 50625621!
thatDivides: aDividend withGcd: gcd
	^ (aDividend negated) thatIsDividedBy: self negated withGcd: gcd.! !

self!

aDivisor!
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:31:07' prior: 50625687!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion with: self over: aDivisor.! !

aDivisor!

aDividend!

greatestCommonDivisor!

aDividend!

self!

gcd!

----SNAPSHOT----(20 April 2023 00:38:05) CuisUniversity-5706.image priorSource: 9382525!
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:41:23' prior: 50625707!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion initializeWith: self over: aDivisor. ! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:44:00'!
CoprimesWith: aDividend over: aDivisor

	|greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	^aDivisor thatDivides: aDividend withGcd: greatestCommonDivisor.

	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"
	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:44:16' prior: 50625724!
CoprimesWith: aDividend over: aDivisor

	^self new initializeWith: aDividend over: aDivisor.
	! !
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:44:58' prior: 50625634!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self // gcd.
	denominator := aDivisor // gcd.

	^Fraccion CoprimesWith:  numerator over: denominator.
	! !
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:45:05' prior: 50625758!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self // gcd.
	denominator := aDivisor // gcd.

	^Fraccion CoprimesWith: numerator over: denominator.
	! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:45:18' prior: 50625669!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self  // gcd.
	denominator := aDivisor // gcd.

	^Fraccion CoprimesWith: numerator over: denominator.! !
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:45:43' prior: 50625718!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion CoprimesWith: self over: aDivisor. ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:45:45'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:45:46'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:45:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:45:49'!
ERROR!

numerator!

denominator!

numerator!

aDivisor!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:47:20'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:47:20'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:47:24'!
ERROR!

aDivisorEntero!

aDivisor!

aDividend!

greatestCommonDivisor!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:51:15' prior: 50625578!
with: aDividend over: aDivisor

	|greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	
	
	^aDivisor thatDivides: aDividend withGcd: greatestCommonDivisor.

	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"
	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:52:05' prior: 50626073!
with: aDividend over: aDivisor

	|newNumerator newDenominator greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	newNumerator := aDividend // greatestCommonDivisor.
	newDenominator := aDivisor // greatestCommonDivisor.
	
	^aDivisor thatDivides: aDividend withGcd: greatestCommonDivisor.

	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"
	! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 00:52:21' prior: 50626100!
with: aDividend over: aDivisor

	|newNumerator newDenominator greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	newNumerator := aDividend // greatestCommonDivisor.
	newDenominator := aDivisor // greatestCommonDivisor.
	
	^newDenominator thatDivides: newNumerator withGcd: greatestCommonDivisor.

	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [^self error: self canNotDivideByZeroErrorDescription].
	
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:23'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:52:24'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:24'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:52:33'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:52:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:34'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:52:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:52:59'!
ERROR!

aDivisorEntero!

newDenominator!

newNumerator!

----SNAPSHOT----(20 April 2023 00:56:36) CuisUniversity-5706.image priorSource: 9410040!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:58:15' prior: 50625767!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self "// gcd".
	denominator := aDivisor "// gcd".

	^Fraccion CoprimesWith: numerator over: denominator.
	! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:58:25' prior: 50625776!
thatIsDividedBy: aDivisor withGcd: gcd
	
	|numerator denominator|
	
	numerator := self  "// gcd".
	denominator := aDivisor "// gcd".

	^Fraccion CoprimesWith: numerator over: denominator.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:58:30'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:58:31'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:58:31'!
PASSED!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:59:10' prior: 50626584!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion CoprimesWith: self over: aDivisor.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:59:11'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:59:12'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:59:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:59:12'!
PASSED!
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:59:25' prior: 50626593!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion CoprimesWith: self over: aDivisor.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 00:59:27'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 00:59:28'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 00:59:28'!
PASSED!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 00:59:45' prior: 50625694!
thatDivides: aDividend withGcd: gcd

	^ aDividend thatIsDividedBy: self withGcd: gcd! !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 01:00:24'!
coprimesWith: aDividend over: aDivisor

	^self new initializeWith: aDividend over: aDivisor.
	! !
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:00:24' prior: 50626739!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor.
	! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:00:24' prior: 50626881!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor.! !
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:00:24' prior: 50625785!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor. ! !

!methodRemoval: Fraccion class #CoprimesWith:over: stamp: 'ma 4/20/2023 01:00:24'!
CoprimesWith: aDividend over: aDivisor

	^self new initializeWith: aDividend over: aDivisor.
	!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 01:00:27'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 01:00:28'!
PASSED!

----SNAPSHOT----(20 April 2023 01:00:51) CuisUniversity-5706.image priorSource: 9437761!
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 01:01:20' prior: 50626131!
with: aDividend over: aDivisor

	|numerator denominator greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	^denominator thatDivides: numerator withGcd: greatestCommonDivisor.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:01:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 01:01:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 01:01:23'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:01:30' prior: 50625607!
thatDivides: aDividend withGcd: gcd

	^ self error: Fraccion canNotDivideByZeroErrorDescription.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:01:33' prior: 50625646!
thatIsDividedBy: aDivisor withGcd: gcd

	^ Entero with: 0.! !
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:01:37' prior: 50624863 overrides: 50624859!
isNegative

	^ false! !

----SNAPSHOT----(20 April 2023 01:02:16) CuisUniversity-5706.image priorSource: 9457424!
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:02:22' prior: 50625612!
thatDivides: aDividend withGcd: gcd

	^ aDividend. ! !

----SNAPSHOT----(20 April 2023 01:03:20) CuisUniversity-5706.image priorSource: 9462839!

----STARTUP---- (20 April 2023 01:04:11) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!

!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:04:35'!
thatDivides: aDividend

	^ self error: Fraccion canNotDivideByZeroErrorDescription.! !

!methodRemoval: Cero #thatDivides:withGcd: stamp: 'ma 4/20/2023 01:04:38'!
thatDivides: aDividend withGcd: gcd

	^ self error: Fraccion canNotDivideByZeroErrorDescription.!
!Cero methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:04:58'!
thatIsDividedBy: aDivisor

	^ Entero with: 0.! !

!methodRemoval: Cero #thatIsDividedBy:withGcd: stamp: 'ma 4/20/2023 01:05:01'!
thatIsDividedBy: aDivisor withGcd: gcd

	^ Entero with: 0.!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:07'!
thatDivides: aDividend

	^ aDividend thatIsDividedBy: self! !

!methodRemoval: MayorQueUno #thatDivides:withGcd: stamp: 'ma 4/20/2023 01:05:10'!
thatDivides: aDividend withGcd: gcd

	^ aDividend thatIsDividedBy: self withGcd: gcd!
!MayorQueUno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:15'!
thatIsDividedBy: aDivisor

	^Fraccion coprimesWith: self over: aDivisor.
	! !

!methodRemoval: MayorQueUno #thatIsDividedBy:withGcd: stamp: 'ma 4/20/2023 01:05:18'!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor.
	!
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:25'!
thatDivides: aDividend
	^ (aDividend negated) thatIsDividedBy: self negated! !

!methodRemoval: Negativo #thatDivides:withGcd: stamp: 'ma 4/20/2023 01:05:27'!
thatDivides: aDividend withGcd: gcd
	^ (aDividend negated) thatIsDividedBy: self negated withGcd: gcd.!
!Negativo methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:31'!
thatIsDividedBy: aDivisor

	^Fraccion coprimesWith: self over: aDivisor.! !

!methodRemoval: Negativo #thatIsDividedBy:withGcd: stamp: 'ma 4/20/2023 01:05:32'!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor.!
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:38'!
thatDivides: aDividend

	^ aDividend. ! !

!methodRemoval: Uno #thatDivides:withGcd: stamp: 'ma 4/20/2023 01:05:41'!
thatDivides: aDividend withGcd: gcd

	^ aDividend. !
!Uno methodsFor: 'as yet unclassified' stamp: 'ma 4/20/2023 01:05:44'!
thatIsDividedBy: aDivisor

	^Fraccion coprimesWith: self over: aDivisor. ! !

!methodRemoval: Uno #thatIsDividedBy:withGcd: stamp: 'ma 4/20/2023 01:05:46'!
thatIsDividedBy: aDivisor withGcd: gcd

	^Fraccion coprimesWith: self over: aDivisor. !
!Fraccion class methodsFor: 'intance creation' stamp: 'ma 4/20/2023 01:06:00' prior: 50627199!
with: aDividend over: aDivisor

	|numerator denominator greatestCommonDivisor|
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor.
	
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	^denominator thatDivides: numerator.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'ma 4/20/2023 01:06:05'!
PASSED!

----SNAPSHOT----(20 April 2023 01:06:20) CuisUniversity-5706.image priorSource: 9463094!

----STARTUP---- (21 April 2023 19:33:57) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


----End fileIn of C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\Stack-Exercise.st----!

!classRemoval: #OOStackEmpty stamp: 'ma 4/21/2023 19:34:20'!
OOStack subclass: #OOStackEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNonEmpty stamp: 'ma 4/21/2023 19:34:23'!
OOStack subclass: #OOStackNonEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:39:16' prior: 50627753!
isEmpty

	^ elements size = 0
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:39:26' prior: 50627748 overrides: 16920235!
initialize

	elements := OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:39:31' prior: 50627757!
pop
	self subclassResponsibility ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:39:36' prior: 50627761!
push: anElement

	elements add: anElement! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:39:41' prior: 50627766 overrides: 16901663!
size
	^ elements size! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:40:20' prior: 50627770!
top

	(self size > 0) ifTrue: [^ elements first.] ifFalse: [
		self error: self class stackEmptyErrorDescription ]! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 19:40:29'!
PASSED!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:40:46' prior: 50627626!
test01StackShouldBeEmptyWhenCreated

	| stack |
	stack := OOStack new.

	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:41:02' prior: 50627632!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	
	stack push: 'something'.	
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:41:26' prior: 50627639!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:41:33' prior: 50627646!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:41:44' prior: 50627654!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:41:52' prior: 50627669!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:42:00' prior: 50627678!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:42:07' prior: 50627688!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:42:14' prior: 50627699!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 19:42:26' prior: 50627712!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		

! !
!OOStack class methodsFor: 'error descriptions' stamp: 'ma 4/21/2023 19:42:36' prior: 50627785!
stackEmptyErrorDescription

	^ 'stack is empty!!!!!!'! !

----SNAPSHOT----(21 April 2023 19:43:37) CuisUniversity-5706.image priorSource: 9470640!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:46:29' prior: 50627863!
pop

	|lastElement|

	self isEmpty ifTrue: [self error: self class stackEmptyErrorDescription.] ifFalse: [
		
		lastElement := elements last.
		elements removeLast .
		]! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:46:49' prior: 50627994!
pop

	|lastElement|

	self isEmpty ifTrue: [self error: self class stackEmptyErrorDescription.] ifFalse: [
		
		lastElement := elements last.
		elements removeLast .
		
		^lastElement.
		]! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 19:46:56'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 19:47:21'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 19:47:21'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:48:54' prior: 50628003!
pop

	|lastElement|

	self isEmpty ifTrue: [
		self error: self class stackEmptyErrorDescription.
	] ifFalse: [
		
		lastElement := elements last.
		elements removeLast .
		
		^lastElement.
	]! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 19:52:39' prior: 50628078!
pop

	|lastElement|

	self isEmpty ifTrue: [
		self error: self class stackEmptyErrorDescription. 
	] ifFalse: [
		lastElement := elements last.
		elements removeLast .
		
		^lastElement.
	]! !

OOStack subclass: #StackBase
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackBase category: 'Stack-Exercise' stamp: 'ma 4/21/2023 20:43:49'!
OOStack subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'ma 4/21/2023 20:44:05'!
OOStack subclass: #StackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ma 4/21/2023 20:44:13'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'lastElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:45:34' prior: 50628087!
pop

	|lastElemente elements|

	self isEmpty ifTrue: [
		self error: self class stackEmptyErrorDescription. 
	] ifFalse: [
		lastElemente := elements last.
		elements removeLast .
		
		^lastElemente.
	]! !

Object subclass: #OOStack
	instanceVariableNames: 'lastElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ma 4/21/2023 20:45:47'!
Object subclass: #OOStack
	instanceVariableNames: 'lastElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'ma 4/21/2023 20:46:11'!
OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:47:26' prior: 50627867!
push: aStackElement

	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:47:54' prior: 50627858 overrides: 16920235!
initialize

	StackBase new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:49:05' prior: 50628176 overrides: 16920235!
initialize

	lastElement  := StackBase new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:49:34' prior: 50628171!
push: aStackElement
	
	lastElement := StackElement new.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:50:52' prior: 50628186!
push: aStackElement
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:52:20' prior: 50628191!
push: aStackElement
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new.
	StackElement setPreviousElement: lastStackElement.
	! !
!StackElement methodsFor: 'nil' stamp: 'ma 4/21/2023 20:53:04'!
setPreviousElement: aStackOrBaseElement

	previousElement := aStackOrBaseElement ! !

----SNAPSHOT----(21 April 2023 20:54:11) CuisUniversity-5706.image priorSource: 9482872!
!StackBase methodsFor: 'nil' stamp: 'ma 4/21/2023 20:57:45' overrides: 50628181!
initialize! !
!StackElement methodsFor: 'nil' stamp: 'ma 4/21/2023 20:57:57' overrides: 50628181!
initialize! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:01'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:01'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:23'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:23'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:58:52' prior: 50628198!
push: aStackElement
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new setPreviousElement: lastStackElement.
	! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:59'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:58:59'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:59:30' prior: 50628234!
push: aStackElement
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new 
	lastElement setPreviousElement: lastStackElement.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 20:59:32' prior: 50628248!
push: aStackElement
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new.
	lastElement setPreviousElement: lastStackElement.
	! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:59:36'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:59:36'!
ERROR!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 20:59:54' prior: 50627892!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	
	stack push: 'something'.	
	
	#self deny: stack isEmpty! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:59:58'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 20:59:58'!
ERROR!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:00:08' prior: 50628271!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	
	stack push: 'something'.	
	
	"self deny: stack isEmpty"! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:00:12'!
PASSED!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:00:17' prior: 50628284!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	
	stack push: 'something'.	
	
	self deny: stack isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:00:37' prior: 50627853!
isEmpty

	lastElement isEmpty 
	
	! !
!StackBase methodsFor: 'nil' stamp: 'ma 4/21/2023 21:01:03' overrides: 50628301!
isEmpty
	
	^ true! !
!StackElement methodsFor: 'nil' stamp: 'ma 4/21/2023 21:01:13' overrides: 50628301!
isEmpty

	^ false! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:01:18'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 21:01:18'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:01:18'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:01:37'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:01:37'!
ERROR!

stack isEmpty!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:02:29'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:02:29'!
ERROR!

stack isEmpty!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:02:56' prior: 50628301!
isEmpty

	^ lastElement isEmpty 
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:03:04'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:03:04'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:03:04'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 21:03:04'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:03:04'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:03:30' prior: 50628138!
pop

	lastElement pop! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:03:46' prior: 50628396!
pop

	^ lastElement pop! !
!StackBase methodsFor: 'nil' stamp: 'ma 4/21/2023 21:04:07' overrides: 50628400!
pop

	self error: self class stackEmptyErrorDescription ! !
!StackElement methodsFor: 'nil' stamp: 'ma 4/21/2023 21:05:09' overrides: 50628400!
pop
! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:05:28' prior: 50628409 overrides: 50628400!
pop
	
	lastElement := previousElement! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:05:34' prior: 50628413 overrides: 50628400!
pop
	
	lastElement := previousElement.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:08:12' prior: 50628418 overrides: 50628400!
pop
	
	lastElement := previousElement.
	^ self.! !

----SNAPSHOT----(21 April 2023 21:09:48) CuisUniversity-5706.image priorSource: 9489940!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:12:08'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:12:08'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:12:08'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:12:08'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 21:12:08'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:12:08'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 21:12:08'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:12:08'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 21:12:08'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:12:08'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:12:12'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:12:28'!
FAILURE!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:12:49' prior: 50627899!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	"self assert: stack isEmpty"! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:12:51'!
PASSED!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:13:00' prior: 50628470!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:13:11'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:13:11'!
FAILURE!

stack isEmpty!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:13:41' prior: 50628481!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self halt.
	
	self assert: stack isEmpty! !

stack!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:14:40'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:14:40'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:14:40'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 21:14:40'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:14:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 21:14:40'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:14:40'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 21:14:40'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:14:41'!
FAILURE!

stack!

stack push: 'something'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:15:58' prior: 50628257!
push: aValue
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new.
	lastElement setPreviousElement: lastStackElement.
	! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:18:32'!
initializeWith: aValue
! !

OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'ma 4/21/2023 21:18:40'!
OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:18:46' prior: 50628542!
initializeWith: aValue
	
	value := aValue! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:19:17' prior: 50628534!
push: aValue
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement new initializeWith: aValue .
	lastElement setPreviousElement: lastStackElement.
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 21:19:30'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 21:19:30'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:19:30'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 21:19:30'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 21:19:30'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 21:19:30'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:19:30'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 21:19:30'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 21:19:30'!
FAILURE!

stack!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:20:05' prior: 50628495!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	
	
	self assert: stack isEmpty! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:20:06'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:20:14'!
FAILURE!

 stack isEmpty!

stack isEmpty!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:21:52'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:21:52'!
FAILURE!

stack isEmpty!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:22:22'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:22:31'!
PASSED!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:23:00' prior: 50628603!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	
	self halt.
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:23:14' prior: 50628631!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty
	self halt.! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:23:20' prior: 50628639!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty.
	self halt.! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:23:23'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:23:23'!
FAILURE!

stack!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:23:59' prior: 50628647!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	self halt.
	stack push: 'something'.
	self halt.
	stack pop.
	
	self assert: stack isEmpty.
	self halt.! !

stack!

stack!

stack!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:25:57' prior: 50628423 overrides: 50628400!
pop
	
	self halt.
	lastElement := previousElement.
	self halt.
	^ self.! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 21:26:17' prior: 50628662!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	self halt.
	stack push: 'something'.
	self halt.
	stack pop.
	self halt.
	self assert: stack isEmpty.
	self halt.! !

stack!

stack!

----SNAPSHOT----(21 April 2023 21:32:23) CuisUniversity-5706.image priorSource: 9496850!

stack!

stack!

stack!

a StackElement!

a StackElement!

StackElement!

stack!

	a StackElement!

StackElement!

!methodRemoval: StackBase #initialize stamp: 'ma 4/21/2023 21:46:07'!
initialize!
!StackBase methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:46:43' overrides: 50628181!
initialize
! !

a StackElement!

StackElement!
!StackElement class methodsFor: 'no messages' stamp: 'ma 4/21/2023 21:49:43'!
with: aValue

	self class new initializeWith: aValue! !
!StackElement class methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:49:50' prior: 50628701!
with: aValue

	^self class new initializeWith: aValue! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:50:16' prior: 50628564!
push: aValue
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement with: aValue .
	lastElement setPreviousElement: lastStackElement.
	! !

!methodRemoval: StackElement #initialize stamp: 'ma 4/21/2023 21:50:33'!
initialize!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:50:59'!
ERROR!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:51:23' overrides: 50628181!
initialize! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 21:52:16'!
ERROR!

StackElement
	with: 2!

StackElement with: '2'
!
!StackElement class methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 21:55:31' prior: 50628706!
with: aValue

	^self new initializeWith: aValue! !

self new!

a StackElement!

aValue!

a StackElement!

StackElement!

self new initializeWith: aValue!

a StackElement!

lastElement!

aStackOrBaseElement!

an OOStack!

lastElement!

stack!

a StackElement!

stack!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:16:54'!
setLastElementOrBase: elementOrBase

	lastElement  := elementOrBase! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:17:34' prior: 50628673 overrides: 50628400!
pop
	
	self halt.
	
	self halt.
	^ self.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:18:08' prior: 50628752 overrides: 50628400!
pop
	
	self halt.
	self setLastElementOrBase: previousElement.
	self halt.
	^ self.! !

stack!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 23:19:47' prior: 50628678!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	self halt.
	stack pop.
	self halt.
	self assert: stack isEmpty.
	self halt.! !

elementOrBase!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:24:55' prior: 50628757 overrides: 50628400!
pop
	
	self halt.
	OOStack setLastElementOrBase: previousElement.
	self halt.
	^ self.! !

----SNAPSHOT----(21 April 2023 23:36:40) CuisUniversity-5706.image priorSource: 9505167!

StackElement class!

| x y |!

StackElement className!

classThatDefinesClassVariable!

StackElement superclass!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:43:19' prior: 50628773 overrides: 50628400!
pop
	
	self halt.
	self class superclass setLastElementOrBase: previousElement.
	self halt.
	^ self.! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 23:43:43'!
ERROR!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:44:11' prior: 50628786 overrides: 50628400!
pop
	
	self halt.
	StackElement superclass setLastElementOrBase: previousElement.
	self halt.
	^ self.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:45:06' prior: 50628797 overrides: 50628400!
pop
	
	self halt.
	StackElement setLastElementOrBase: previousElement.
	self halt.
	^ self.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:45:40' prior: 50628804 overrides: 50628400!
pop
	
	self halt.
	self setLastElementOrBase: previousElement.
	self halt.
	^ self.! !

OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'ma 4/21/2023 23:45:57'!
OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:47:47' prior: 50628711!
push: aValue 
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement with: aValue fromStack: self.
	lastElement setPreviousElement: lastStackElement.
	! !
!StackElement class methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:48:12'!
with: aValue fromStack: aStack

	^self new initializeWith: aValue fromStack: aStack! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:48:31'!
initializeWith: aValue fromStack: aStack
	
	value := aValue.
	stack := aStack ! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:48:50' prior: 50628811 overrides: 50628400!
pop
	
	self halt.
	stack setLastElementOrBase: previousElement.
	self halt.
	^ self.! !

stack!

 stack isEmpty.!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 23:50:51' prior: 50628763!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.

	stack pop.

	self assert: stack isEmpty.
! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:51:06' prior: 50628852 overrides: 50628400!
pop
	
	stack setLastElementOrBase: previousElement.
	
	^ self.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/21/2023 23:51:15'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/21/2023 23:51:15'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/21/2023 23:51:15'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 23:51:15'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/21/2023 23:51:15'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/21/2023 23:51:15'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/21/2023 23:51:15'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 23:51:15'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/21/2023 23:51:15'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/21/2023 23:51:15'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 23:51:34'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/21/2023 23:51:34'!
FAILURE!

stack pop!
!OOStackTest methodsFor: 'test' stamp: 'ma 4/21/2023 23:52:28' prior: 50627907!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	self halt.
	pushedObject := 'something'.
	self halt.
	stack push: pushedObject.
	self halt.
	
	self assert: stack pop = pushedObject
	self halt.! !

stack!

stack!

lastElement pop!

stack pop!

stack!

stack!

stack!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/21/2023 23:59:07' prior: 50628868 overrides: 50628400!
pop
	
	stack setLastElementOrBase: previousElement.
	
	^ value.! !
!OOStackTest methodsFor: 'test' stamp: 'ma 4/22/2023 00:00:10' prior: 50628912!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:00:17'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:00:17'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:00:17'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:00:17'!
FAILURE!
!StackBase methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:01:26' overrides: 50627876!
top

	self error: self class stackEmptyErrorDescription ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:04:39' prior: 50627876!
top

	"(self size > 0) ifTrue: [^ elements first.] ifFalse: [
		self error: self class stackEmptyErrorDescription ]"
	
	^ lastElement top! !
!StackElement methodsFor: 'nil' stamp: 'ma 4/22/2023 00:05:04' overrides: 50628978!
top

	^ value! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:05:09'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:05:09'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:05:09'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:05:41' prior: 50627872 overrides: 16901663!
size
! !

Object subclass: #OOStack
	instanceVariableNames: 'lastElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'ma 4/22/2023 00:05:47'!
Object subclass: #OOStack
	instanceVariableNames: 'lastElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:05:57' prior: 50628830!
push: aValue 
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement with: aValue fromStack: self.
	lastElement setPreviousElement: lastStackElement.
	
	size := size + 1
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:06:14' prior: 50628400!
pop
	
	^ lastElement pop! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:06:44' prior: 50628926 overrides: 50629051!
pop
	
	stack setLastElementOrBase: previousElement.
	stack decreaseSize.
	
	^ value.! !
!OOStack methodsFor: 'nil' stamp: 'ma 4/22/2023 00:07:47'!
decreaseSize

	size := size - 1! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:08:10' prior: 50629026 overrides: 16901663!
size
	
	^ size! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:08:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:08:13'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:08:13'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:08:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:08:20'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:08:56' prior: 50628181 overrides: 16920235!
initialize

	lastElement  := StackBase new.
	size := 0.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:09:01'!
PASSED!

----SNAPSHOT----(22 April 2023 00:10:51) CuisUniversity-5706.image priorSource: 9508089!

----SNAPSHOT----(22 April 2023 00:11:05) CuisUniversity-5706.image priorSource: 9519758!

!methodRemoval: StackElement #initializeWith: stamp: 'ma 4/22/2023 00:11:39'!
initializeWith: aValue
	
	value := aValue!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:11:41'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:11:41'!
PASSED!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:12:22'!
initializeWith: aValue withStack: aStack
	
	value := aValue.
	stack := aStack ! !
!StackElement class methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:12:22' prior: 50628839!
with: aValue fromStack: aStack

	^self new initializeWith: aValue withStack: aStack! !

!methodRemoval: StackElement #initializeWith:fromStack: stamp: 'ma 4/22/2023 00:12:22'!
initializeWith: aValue fromStack: aStack
	
	value := aValue.
	stack := aStack !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:12:24'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:12:24'!
PASSED!
!StackElement class methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:12:52'!
with: aValue withStack: aStack

	^self new initializeWith: aValue withStack: aStack! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:12:52' prior: 50629041!
push: aValue 
	
	| lastStackElement|
	
	lastStackElement := lastElement.
	
	lastElement := StackElement with: aValue withStack: self.
	lastElement setPreviousElement: lastStackElement.
	
	size := size + 1
	! !

!methodRemoval: StackElement class #with:fromStack: stamp: 'ma 4/22/2023 00:12:52'!
with: aValue fromStack: aStack

	^self new initializeWith: aValue withStack: aStack!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/22/2023 00:12:54'!
PASSED!

----SNAPSHOT----(22 April 2023 00:12:57) CuisUniversity-5706.image priorSource: 9519848!
!SentenceFinderByPrefix class methodsFor: 'no messages' stamp: 'ma 4/22/2023 00:18:21'!
find
	
	! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:22:05' prior: 50629293!
find
"
pop 

	compare prefijo
		if true guardamos
		recursion
	push" 
	
	
		
	
	! !

!methodRemoval: SentenceFinderByPrefix class #find stamp: 'ma 4/22/2023 00:22:09'!
find
"
pop 

	compare prefijo
		if true guardamos
		recursion
	push" 
	
	
		
	
	!
!SentenceFinderByPrefix methodsFor: 'nil' stamp: 'ma 4/22/2023 00:22:15'!
find
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:28:14'!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement|
	
	
	currentElement := aStack pop.
	"compare: currentElement with: aPrefix."
	self findElementWithPrefix: aPrefix inStack: aStack.
	aStack push: currentElement.
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:29:11' prior: 50629312!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
	]
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:30:43'!
findElementWithPrefixAux: aPrefix inStack: aStack

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
	]
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:31:04' prior: 50629335!
findElementWithPrefixAux: aPrefix inStack: aStack

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
		
		^ currentElement.
	]
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:31:42' prior: 50629323!
findElementWithPrefix: aPrefix inStack: aStack

	| xxx |
	
	xxx := OrderedCollection new.
	
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:32:25'!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
		
		^ currentElement.
	]
	
	
! !

!methodRemoval: SentenceFinderByPrefix #findElementWithPrefixAux:inStack: stamp: 'ma 4/22/2023 00:32:27'!
findElementWithPrefixAux: aPrefix inStack: aStack

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
		
		^ currentElement.
	]
	
	
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:33:07' prior: 50629360!
findElementWithPrefix: aPrefix inStack: aStack

	| xxx |
	
	xxx := OrderedCollection new.
	self findElementWithPrefixAux:  aPrefix inStack:  aStack andStoreItInCollection: xxx
	
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:33:09' prior: 50629393!
findElementWithPrefix: aPrefix inStack: aStack

	| xxx |
	
	xxx := OrderedCollection new.
	self findElementWithPrefixAux:  aPrefix inStack:  aStack andStoreItInCollection: xxx.
	
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:33:20' prior: 50629403!
findElementWithPrefix: aPrefix inStack: aStack

	| xxx |
	
	xxx := OrderedCollection new.
	self findElementWithPrefixAux:  aPrefix inStack:  aStack andStoreItInCollection: xxx.
	
	^ xxx.
	
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:33:54' prior: 50629366!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."
		self findElementWithPrefix: aPrefix inStack: aStack.
		aStack push: currentElement.
		
		aCollection add: currentElement.
	]
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:35:05' prior: 50629423!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		"compare: currentElement with: aPrefix."

		self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
		aCollection add: currentElement.
		
		aStack push: currentElement.
	]
	
	
! !

----SNAPSHOT----(22 April 2023 00:35:20) CuisUniversity-5706.image priorSource: 9524431!
!SentenceFinderByPrefixTest methodsFor: 'nil' stamp: 'ma 4/22/2023 00:39:48'!
A
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau'.
	
	SentenceFinderByPrefix new findElementWithPrefix: 'a' inStack: stack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:40:58'!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau'.
	
	SentenceFinderByPrefix new findElementWithPrefix: 'a' inStack: stack! !

!methodRemoval: SentenceFinderByPrefixTest #A stamp: 'ma 4/22/2023 00:41:02'!
A
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau'.
	
	SentenceFinderByPrefix new findElementWithPrefix: 'a' inStack: stack!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:41:10'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:41:21' prior: 50629464!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau'.
	
	^ SentenceFinderByPrefix new findElementWithPrefix: 'a' inStack: stack! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:41:23'!
PASSED!

stack!

^ SentenceFinderByPrefix new findElementWithPrefix: 'a' inStack: stack!

'hola' copyFrom: 0 to: 1!

'hola' copyFrom: 1 to: 2!

'hola' size!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:47:11' prior: 50629438!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		
		(aPrefix = currentElement copyFrom: 1 to: aPrefix size) ifTrue: [

			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
			aCollection add: currentElement.
		] ifFalse: [
			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
		].
		
		aStack push: currentElement.
	]
	
	
! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:47:34' prior: 50629483!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau'.
	
	^ SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:47:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:47:41'!
ERROR!

currentElement!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:48:15' prior: 50629499!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [

			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
			aCollection add: currentElement.
		] ifFalse: [
			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
		].
		
		aStack push: currentElement.
	]
	
	
! !

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:48:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01 stamp: 'ma 4/22/2023 00:48:25'!
PASSED!

^ SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:49:24' prior: 50629520!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^ SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack! !

^ SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:49:59' prior: 50629563!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^ SentenceFinderByPrefix new findElementWithPrefix: 'Ho' inStack: stack! !

^ SentenceFinderByPrefix new findElementWithPrefix: 'Ho' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:50:45' prior: 50629575!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^SentenceFinderByPrefix new findElementWithPrefix: 'h o' inStack: stack! !

^SentenceFinderByPrefix new findElementWithPrefix: 'h o' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:51:03' prior: 50629587!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^SentenceFinderByPrefix new findElementWithPrefix: 'ho' inStack: stack! !

^SentenceFinderByPrefix new findElementWithPrefix: 'ho' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/22/2023 00:51:26' prior: 50629599!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack! !

	^SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack!

----SNAPSHOT----(22 April 2023 00:52:36) CuisUniversity-5706.image priorSource: 9529665!

----SNAPSHOT----(22 April 2023 01:01:19) CuisUniversity-5706.image priorSource: 9535080!

----STARTUP---- (23 April 2023 17:27:23) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!methodRemoval: SentenceFinderByPrefix #find stamp: 'ma 4/23/2023 17:27:47'!
find
!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:28:27'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:29:21'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:29:21'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:29:34' prior: 50629413!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        self halt.
        
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
            self halt.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:29:37'!
PASSED!

!methodRemoval: SentenceFinderByPrefix #findElementWithPrefixAux:inStack:andStoreItInCollection: stamp: 'ma 4/23/2023 17:29:52'!
findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection

	|currentElement|
	
	(aStack size > 0) ifTrue: [
		currentElement := aStack pop.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [

			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
			aCollection add: currentElement.
		] ifFalse: [
			self findElementWithPrefixAux: aPrefix inStack: aStack andStoreItInCollection: aCollection.
		].
		
		aStack push: currentElement.
	]
	
	
!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:30:06'!
test01FindIsCaseSensitive

    | stack modelResult |
    
    stack := OOStack new.
    stack 
        push: 'hello';
        push: 'Hi'.
        
    modelResult := OrderedCollection new.
    modelResult add: 'hello'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack) = modelResult.! !

!methodRemoval: SentenceFinderByPrefixTest #test01 stamp: 'ma 4/23/2023 17:30:10'!
test01
	| stack |
	
	stack := OOStack new.
	stack 
		push: 'hola';
		push: 'chau';
		push: 'hernan';
		push: 'perro'.
	
	^SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:30:27' prior: 50629700!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:30:31'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:30:36'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:30:36'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:30:52'!
test02FindReturnInCorrectOrder

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack 
        push: 'dog';
        push: 'cat';
        push: 'doctor'.
        
    
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:30:53'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:30:53'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:31:08'!
FAILURE!

(SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack)!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:31:24'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:31:24'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:31:33' prior: 50629860!
test02FindReturnInCorrectOrder

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack 
        push: 'dog';
        push: 'cat';
        push: 'doctor'.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:31:37'!
FAILURE!

(SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:32:14'!
PASSED!

----SNAPSHOT----(23 April 2023 17:32:29) CuisUniversity-5706.image priorSource: 9535170!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:32:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:32:32'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:32:32'!
FAILURE!

(SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:33:31' prior: 50629922!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack 
        push: 'dog';
        push: 'cat';
        push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:33:35'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:33:35'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:33:49'!
FAILURE!

res = modelResult!

SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack!

res!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:34:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:34:53'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:34:53'!
FAILURE!
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:35:39' prior: 50629056 overrides: 50629051!
pop
	
	stack setLastElementOrBase: previousElement.
	stack decreaseSize.
	self halt.
	
	^ value.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:35:59' prior: 50629801!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
	self halt.
        elementsPoped add: currentElement.
        self halt.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !

self!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:19' prior: 50629964!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack push: 'dog'.
    stack push: 'cat'.
    stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:42' prior: 50630041!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:49' prior: 50630034 overrides: 50629051!
pop
	
	stack setLastElementOrBase: previousElement.
	stack decreaseSize.
	
	^ value.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:37:54'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:37:54'!
FAILURE!

SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.!

res!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:38:46' prior: 50630065!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
res := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack push: 'dog'.
    stack push: 'cat'.
    stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:40:05' prior: 50630120!
test02FindReturnInCorrectOrder

	| stack modelResult res|
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	res := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
	self assert: res = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:40:06'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:40:06'!
FAILURE!

SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:41:54' prior: 50630137!
test02FindReturnInCorrectOrder

	| stack modelResult res|
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	res := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:42:07' prior: 50630163!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:42:15'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:42:16'!
FAILURE!

SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack!

----STARTUP---- (23 April 2023 17:45:28) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!

!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:33:31' prior: 50629922!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack 
        push: 'dog';
        push: 'cat';
        push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:35:39' prior: 50629056 overrides: 50629051!
pop
	
	stack setLastElementOrBase: previousElement.
	stack decreaseSize.
	self halt.
	
	^ value.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:35:59' prior: 50629801!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
	self halt.
        elementsPoped add: currentElement.
        self halt.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:19' prior: 50630209!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack push: 'dog'.
    stack push: 'cat'.
    stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:42' prior: 50630233!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !
!StackElement methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:37:49' prior: 50630226 overrides: 50629051!
pop
	
	stack setLastElementOrBase: previousElement.
	stack decreaseSize.
	
	^ value.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:38:46' prior: 50630257!
test02FindReturnInCorrectOrder

    | stack modelResult res|
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
res := OrderedCollection new.
    modelResult 
            add: 'dog';
            add: 'doctor'.
    stack push: 'dog'.
    stack push: 'cat'.
    stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
    self assert: res = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:40:05' prior: 50630303!
test02FindReturnInCorrectOrder

	| stack modelResult res|
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	res := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
	self assert: res = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:41:54' prior: 50630320!
test02FindReturnInCorrectOrder

	| stack modelResult res|
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	res := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.

	res := SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:42:07' prior: 50630336!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:46:28' prior: 50629778!
test01FindIsCaseSensitive

    | stack modelResult |
    
    stack := OOStack new.
    stack 
        push: 'hello';
        push: 'Hi';
	push: 'harry'.
        
    modelResult := OrderedCollection new.
    modelResult add: 'hello'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:46:50' prior: 50630369!
test01FindIsCaseSensitive

    | stack modelResult |
    
    stack := OOStack new.
    stack 
        push: 'hello';
        push: 'Hi';
	push: 'harry'.
        
    modelResult := OrderedCollection new.
    modelResult add: 'hello';
			add: 'harry'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:47:00'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:47:00'!
FAILURE!

SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:47:42' prior: 50630384!
test01FindIsCaseSensitive

    | stack modelResult |
    
    stack := OOStack new.
    stack 
        push: 'hello';
        push: 'Hi'.
        
    modelResult := OrderedCollection new.
    modelResult add: 'hello'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:47:49'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:48:02' prior: 50630354!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:48:10' prior: 50630426!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
	stack push: 'doctor'.
    	stack push: 'cat'.
    	stack push: 'dog'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:48:13'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:48:13'!
FAILURE!

SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:48:47' prior: 50630441!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'dog'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:48:51' prior: 50630465!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:48:55'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'ma 4/23/2023 17:49:45'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'ma 4/23/2023 17:49:45'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:50:01' prior: 50630273!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection add: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped last.
        elementsPoped removeLast.
    ].

    ^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:50:35' prior: 50630531!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection addLast: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped last.
        elementsPoped removeLast.
    ].

    ^ aCollection.
	
	
	
! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:50:46' prior: 50630480!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:50:50' prior: 50630577!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
		
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:50:52'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:50:52'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:51:07' prior: 50630592!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
		
	stack push: 'doctor'.
    	stack push: 'cat'.
    	stack push: 'dog'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:51:10'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:51:17' prior: 50630614!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
		
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
        
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:51:28'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:52:28' prior: 50630632!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
		
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
	
	self halt.
	stack top.
	stack pop.
        self halt.
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

stack top!

stack pop.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:54:05' prior: 50630650!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'dog';
		add: 'doctor'.
		
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
	
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:54:14' prior: 50630667!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
		
	stack push: 'dog'.
    	stack push: 'cat'.
    	stack push: 'doctor'.
	
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:54:35' prior: 50630682!
test02FindReturnInCorrectOrder

	| stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	modelResult 
		add: 'doctor';
		add: 'dog'.
		
	stack push: 'dog';
    		 push: 'cat';
    		 push: 'doctor'.
	
	self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:54:37'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:55:03' prior: 50630554!
findElementWithPrefix: aPrefix inStack: aStack

    |currentElement aCollection elementsPoped|
    
    aCollection := OrderedCollection new.
    elementsPoped := OrderedCollection new.
    
    aStack size timesRepeat: [
         
        currentElement := aStack pop.
        elementsPoped add: currentElement.
        (aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
            aCollection addLast: currentElement.
        ].

    ].

    elementsPoped size timesRepeat: [
        
        aStack push: elementsPoped first.
        elementsPoped removeFirst.
    ].

    ^ aCollection.
	
	
	
! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:55:46'!
test02FindReturnsCorrectly

	    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'doctor is working'.
    stack 
        push: 'dog is walking';
        push: 'cat is eating';
        push: 'doctor is working';
        push: 'Document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test02FindReturnsCorrectly stamp: 'ma 4/23/2023 17:55:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:55:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:55:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnsCorrectly stamp: 'ma 4/23/2023 17:55:53'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:56:57'!
test02FindReturnsEmptyCollection

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult .! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:57:05'!
test03FindReturnsCorrectly

	    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'doctor is working'.
    stack 
        push: 'dog is walking';
        push: 'cat is eating';
        push: 'doctor is working';
        push: 'Document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult.! !

!methodRemoval: SentenceFinderByPrefixTest #test02FindReturnsCorrectly stamp: 'ma 4/23/2023 17:57:07'!
test02FindReturnsCorrectly

	    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    modelResult 
            add: 'doctor is working'.
    stack 
        push: 'dog is walking';
        push: 'cat is eating';
        push: 'doctor is working';
        push: 'Document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult.!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:57:10'!
test04FindReturnsEmptyCollection

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult .! !

!methodRemoval: SentenceFinderByPrefixTest #test02FindReturnsEmptyCollection stamp: 'ma 4/23/2023 17:57:12'!
test02FindReturnsEmptyCollection

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult .!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 17:57:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 17:57:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/23/2023 17:57:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollection stamp: 'ma 4/23/2023 17:57:15'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:57:31'!
test04FindReturnsEmptyCollectionWithEmptyStack

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult .! !

!methodRemoval: SentenceFinderByPrefixTest #test04FindReturnsEmptyCollection stamp: 'ma 4/23/2023 17:57:33'!
test04FindReturnsEmptyCollection

    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
        
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'doc' inStack: stack) = modelResult .!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:58:00'!
test05FindDoesNotModifyStack

    | stack modelResult stackCopy|
    
    stack := OOStack new.
    stackCopy := OOStack new.

    
    modelResult := OrderedCollection new.
    modelResult add: 'hello'.
    stack 
        push: 'hello';
        push: 'Hi'.
        
    stackCopy
        push: 'hello';
        push: 'Hi'.    
        
    "stackCopy := stack copy."
    self assert: stack = stackCopy.
    "SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:59:07' prior: 50630874!
test05FindDoesNotModifyStack

	| stack modelResult stackCopy|
    
	stack := OOStack new.
	stackCopy := OOStack new.

	modelResult := OrderedCollection new.
	modelResult add: 'hello'.
	stack 
		push: 'hello';
		push: 'Hi'.
        
	stackCopy
		push: 'hello';
		push: 'Hi'.    
        
    "stackCopy := stack copy."
    self assert: stack = stackCopy.
    "SentenceFinderByPrefix new findElementWithPrefix: 'h' inStack: stack."! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 17:59:58'!
compareStack: originalStak withStack: resultStack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:00:47' prior: 50630893!
test05FindDoesNotModifyStack

	| stack modelResult stackCopy|
    
	stack := OOStack new.
	stackCopy := OOStack new.

	modelResult := OrderedCollection new.
	modelResult add: 'hello'.
	stack 
		push: 'hello';
		push: 'Hi'.
        
	stackCopy
		push: 'hello';
		push: 'Hi'.    
        
   self compareStack: stackCopy withStack: stack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:06:32' prior: 50630910!
compareStack: aStack withStack: anotherStack

	|currentElementFirstStack currentElementSecondStack|

	[aStack size = anotherStack size] ifTrue: [
		
		aStack size timesRepeat: [
			
			currentElementFirstStack := aStack pop.
			currentElementSecondStack := anotherStack pop.
			
			[currentElementFirstStack = currentElementSecondStack] ifFalse: [
				self error: 'The stacks are not in the same order'
				]
			]
		]
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:08:01' prior: 50630931!
compareStack: aStack withStack: anotherStack

	|currentElementFirstStack currentElementSecondStack|

	[aStack size = anotherStack size] ifTrue: [
		
		aStack size timesRepeat: [
			
			currentElementFirstStack := aStack pop.
			currentElementSecondStack := anotherStack pop.
			
			^ currentElementFirstStack  ~= currentElementSecondStack

			]
		^true.
		
		]
	
	! !

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:08:04'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:08:04'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:08:24' prior: 50630948!
compareStack: aStack withStack: anotherStack

	|currentElementFirstStack currentElementSecondStack|

	[aStack size = anotherStack size] ifTrue: [
		
		aStack size timesRepeat: [
			
			currentElementFirstStack := aStack pop.
			currentElementSecondStack := anotherStack pop.
			
			^ currentElementFirstStack  ~= currentElementSecondStack

		].
	
		^true.
	]
	
	! !

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:08:25'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:08:25'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:08:47' prior: 50630970!
compareStack: aStack withStack: anotherStack

	|currentElementFirstStack currentElementSecondStack|

	(aStack size = anotherStack size) ifTrue: [
		
		aStack size timesRepeat: [
			
			currentElementFirstStack := aStack pop.
			currentElementSecondStack := anotherStack pop.
			
			^ currentElementFirstStack  ~= currentElementSecondStack

		].
	
		^true.
	]
	
	! !

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:08:55'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:13:48' prior: 50630715!
findElementWithPrefix: aPrefix inStack: aStack
	
	

	|currentElement aCollection elementsPoped|
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:17:40' prior: 50631011!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: [self error: 'No está permitido la búsqueda con un prefijo vacío!!'].
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !

'hola puta' asOrderedCollection !

'hola puta' asOrderedCollection !

('hola puta' asOrderedCollection) detect: [:char| char = ' '].!

('hola puta' asOrderedCollection) detect: [:char| char = '20'].!

('hola puta' asOrderedCollection) detect: [:char| char = '$20'].!

('hola puta' asOrderedCollection)!

$ "20"!

('hola puta' asOrderedCollection)!

('hola puta' asOrderedCollection) at: 5!

('hola puta' asOrderedCollection) at: 5 !

(('hola puta' asOrderedCollection) at: 5)!

(('hola puta' asOrderedCollection) at: 5) isSeparator !

(('hola puta' asOrderedCollection) at: 4) isSeparator !

('hola puta' asOrderedCollection) detect: [:char| char isSeparator].!

'hola puta' detect: [:char| char isSeparator]!

'hola puta' detect: [:char| char isSeparator] ifNone: [^ true].
^false
!

'hola puta' detect: [:char| char isSeparator] ifNone: [^ false].
^true

!


'holaputa' detect: [:char| char isSeparator] ifNone: [^ false].
^true!
!SentenceFinderByPrefix methodsFor: 'nil' stamp: 'ma 4/23/2023 18:28:28'!
aPrefixHasWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ false].
	^true 
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:31:19'!
aPrefixWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: 'The prefix contains a white space'.
! !

!methodRemoval: SentenceFinderByPrefix #aPrefixHasWhitespaces: stamp: 'ma 4/23/2023 18:31:32'!
aPrefixHasWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ false].
	^true 
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:31:45'!
aPrefixDosentContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: 'The prefix contains a white space'.
! !

!methodRemoval: SentenceFinderByPrefix #aPrefixWhitespaces: stamp: 'ma 4/23/2023 18:31:49'!
aPrefixWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: 'The prefix contains a white space'.
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:33:34' prior: 50631032!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: [self error: 'No está permitido la búsqueda con un prefijo vacío!!'].
	self aPrefixDosentContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:33:56'!
aPrefixDoNotContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: 'The prefix contains a white space'.
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:33:56' prior: 50631121!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: [self error: 'No está permitido la búsqueda con un prefijo vacío!!'].
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !

!methodRemoval: SentenceFinderByPrefix #aPrefixDosentContainsWhitespaces: stamp: 'ma 4/23/2023 18:33:56'!
aPrefixDosentContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: 'The prefix contains a white space'.
!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:38:45'!
test06CannotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
  ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:39:24'!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
  ! !

!methodRemoval: SentenceFinderByPrefixTest #test06CannotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:39:27'!
test06CannotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
  !
!SentenceFinderByPrefix class methodsFor: 'no messages' stamp: 'ma 4/23/2023 18:41:30'!
prefixEmptyErrorDescription

	! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:42:03' prior: 50631209!
prefixEmptyErrorDescription

	^'prefix is empty'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:43:05' prior: 50631155!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: self class prefixEmptyErrorDescription.
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:43:23'!
prefixContainsWitheSpaceErrorDescription

	^'prefix is empty'! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:43:44' prior: 50631243!
prefixContainsWitheSpaceErrorDescription

	^'The prefix contains a white space'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:43:58' prior: 50631146!
aPrefixDoNotContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self class prefixContainsWitheSpaceErrorDescription.
! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:48:11' prior: 50631195!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [self findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]
  ! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:48:15'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:48:15'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:48:57' prior: 50631264!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]
  ! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:48:59'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:49:23' prior: 50631286!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix new prefixEmptyErrorDescription]
  ! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:49:26'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:50:20' prior: 50631305!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]
  ! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:50:23'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:50:23'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:50:46'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:54:44' prior: 50631219!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: [self class prefixEmptyErrorDescription].
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:54:48'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:54:48'!
FAILURE!

SentenceFinderByPrefix prefixEmptyErrorDescription!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:56:31'!
PASSED!

self should: aBlock raise: anExceptonHandlingCondition withExceptionDo: assertionsBlock description: self defaultFailDescription!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:58:13' prior: 50631324!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	"self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]"
		
	SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack
  ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:58:15' prior: 50631391!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	"self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]"
		
	SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack.
  ! !

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 18:58:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 18:58:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/23/2023 18:58:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/23/2023 18:58:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 18:58:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 18:58:18'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:58:25' prior: 50631409!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	"self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]"
	
	self halt.
	SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack.
  ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:58:40' prior: 50631448!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	"self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]"
	
	SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack.
	self halt.
  ! !

SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack.!

SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 18:59:32' prior: 50631350!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	self halt.
	(aPrefix = '') ifTrue: [self class prefixEmptyErrorDescription].
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:00:18' prior: 50631488!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	self halt.
	(aPrefix = '') ifTrue: [self error: self class prefixEmptyErrorDescription].
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:00:21' prior: 50631513!
findElementWithPrefix: aPrefix inStack: aStack

	|currentElement aCollection elementsPoped|
	
	(aPrefix = '') ifTrue: [self error: self class prefixEmptyErrorDescription].
	self aPrefixDoNotContainsWhitespaces: aPrefix.
    
	aCollection := OrderedCollection new.
	elementsPoped := OrderedCollection new.
    
	aStack size timesRepeat: [
         
		currentElement := aStack pop.
		elementsPoped add: currentElement.
		
		(aPrefix = (currentElement copyFrom: 1 to: aPrefix size)) ifTrue: [
			aCollection addLast: currentElement.
		].

	].

	elementsPoped size timesRepeat: [
		aStack push: elementsPoped first.
		elementsPoped removeFirst.
	].

	^ aCollection.
	
	
	
! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:00:28'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:00:42'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:00:42'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:00:55' prior: 50631466!
test06CanNotFindIfPrefixIsEmpty

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription]
  ! !

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 19:00:58'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:00:58'!
PASSED!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:02:36'!
prefixContainsWithespaceErrorDescription

	^'The prefix contains a white space'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:02:36' prior: 50631255!
aPrefixDoNotContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self class prefixContainsWithespaceErrorDescription.
! !

!methodRemoval: SentenceFinderByPrefix class #prefixContainsWitheSpaceErrorDescription stamp: 'ma 4/23/2023 19:02:36'!
prefixContainsWitheSpaceErrorDescription

	^'The prefix contains a white space'!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:02:42'!
test07CanNotFindIfPrefixHasWhitespaces

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: '' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixContainsWithespaceErrorDescription]
  ! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:02:56' prior: 50631618!
aPrefixDoNotContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	^self error: self class prefixContainsWithespaceErrorDescription.
! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:03:06' prior: 50631612!
prefixContainsWithespaceErrorDescription

	^'The prefix contains a whitespace'! !

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:03:11'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:03:11'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:03:29' prior: 50631649!
aPrefixDoNotContainsWhitespaces: aPrefix

	aPrefix detect: [:char| char isSeparator] ifNone: [^ true].
	self error: self class prefixContainsWithespaceErrorDescription.
! !

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:03:32'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:03:32'!
FAILURE!

SentenceFinderByPrefix prefixContainsWithespaceErrorDescription!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/23/2023 19:04:33' prior: 50631633!
test07CanNotFindIfPrefixHasWhitespaces

	| stack |
    
	stack := OOStack new.
	stack 
		push: 'hello';
		push: 'Hi'.
		
	self 
		should: [SentenceFinderByPrefix new findElementWithPrefix: 'he llo' inStack: stack]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixContainsWithespaceErrorDescription]

  ! !

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/23/2023 19:04:36'!
PASSED!

----SNAPSHOT----(23 April 2023 19:05:11) CuisUniversity-5706.image priorSource: 9545470!

----SNAPSHOT----(23 April 2023 19:05:55) CuisUniversity-5706.image priorSource: 9602679!

----STARTUP---- (24 April 2023 07:16:11) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!

!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 08:55:47'!
test08FindDoNotFindAnything

	    | stack modelResult |
    
    stack := OOStack new.
    modelResult := OrderedCollection new.
    stack 
        push: 'dog is walking';
        push: 'cat is eating';
        push: 'doctor is working';
        push: 'Document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test08FindDoNotFindAnything stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/24/2023 08:55:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FindDoNotFindAnything stamp: 'ma 4/24/2023 08:55:53'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 08:57:35'!
test08FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	stack 
		add: 'dog is walking';
		add: 'doctor is working';
		add: 'document is easy'.

	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 08:57:41'!
test09FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	stack 
		add: 'dog is walking';
		add: 'doctor is working';
		add: 'document is easy'.

	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.! !

!methodRemoval: SentenceFinderByPrefixTest #test08FindEverything stamp: 'ma 4/24/2023 08:57:43'!
test08FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	stack 
		add: 'dog is walking';
		add: 'doctor is working';
		add: 'document is easy'.

	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:57:46'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:57:46'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:58:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:58:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:58:37'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:59:08'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:59:08'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 08:59:27' prior: 50631808!
test09FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	modelResult 
		add: 'dog is walking';
		add: 'doctor is working';
		add: 'document is easy'.

	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 08:59:30'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 09:00:41' prior: 50631863!
test09FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	modelResult 
		add: 'document is easy';
		add: 'doctor is working';
		add: 'dog is walking'.


	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'al' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 09:00:44'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 09:00:44'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'ma 4/24/2023 09:01:03' prior: 50631883!
test09FindEverything

	    | stack modelResult |
    
	stack := OOStack new.
	modelResult := OrderedCollection new.
	
	modelResult 
		add: 'document is easy';
		add: 'doctor is working';
		add: 'dog is walking'.


	stack 
		push: 'dog is walking';
		push: 'doctor is working';
		push: 'document is easy'.
            
    self assert: (SentenceFinderByPrefix new findElementWithPrefix: 'do' inStack: stack) = modelResult.! !

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FindDoNotFindAnything stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 09:01:06'!
PASSED!

----SNAPSHOT----(24 April 2023 09:01:58) CuisUniversity-5706.image priorSource: 9602769!

!testRun: #SentenceFinderByPrefixTest #test01FindIsCaseSensitive stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02FindReturnInCorrectOrder stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03FindReturnsCorrectly stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04FindReturnsEmptyCollectionWithEmptyStack stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05FindDoesNotModifyStack stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06CanNotFindIfPrefixIsEmpty stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07CanNotFindIfPrefixHasWhitespaces stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08FindDoNotFindAnything stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09FindEverything stamp: 'ma 4/24/2023 09:02:49'!
PASSED!

----SNAPSHOT----(24 April 2023 09:26:44) CuisUniversity-5706.image priorSource: 9609813!

----STARTUP---- (14 May 2023 18:28:18) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'ma 5/14/2023 18:28:52'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'ma 5/14/2023 18:28:52'!
OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBase stamp: 'ma 5/14/2023 18:28:52'!
OOStack subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'ma 5/14/2023 18:28:53'!
Object subclass: #OOStack
	instanceVariableNames: 'lastElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'ma 5/14/2023 18:28:53'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'ma 5/14/2023 18:28:53'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:32:37'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:49:27'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: 'initialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:49:41'!
test01TheRoverDoesNotMoveWithEmptyCommand
	
	| actualPosition |
	self assert: actualPosition equals: initialPosition		
! !

TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:49:54'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:50:06' prior: 50632057!
test01TheRoverDoesNotMoveWithEmptyCommand
	
	| actualPosition initialPosition|
	
	
	
	self assert: actualPosition equals: initialPosition		
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:50:15'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:50:15'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:51:11' prior: 50632076!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	"self assert: actualPosition equals: initialPosition		"
! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:51:50'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:51:38' prior: 50632091!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover|
	
	rover := MarsRover new.
	
	self assert: rover actualPosition equals: rover initialPosition	
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:51:57'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:52:47'!
actualPosition
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:52:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:52:55' prior: 50632116!
actualPosition
	^ actualPosition! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:53:04'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:53:09'!
initialPosition
	self shouldBeImplemented.! !

----STARTUP---- (14 May 2023 18:54:17) as C:\Users\marti\Desktop\Facultad\Inge 1\isw1\cuis\CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'ma 5/14/2023 18:54:20'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackElement stamp: 'ma 5/14/2023 18:54:20'!
OOStack subclass: #StackElement
	instanceVariableNames: 'previousElement value stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackBase stamp: 'ma 5/14/2023 18:54:21'!
OOStack subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'ma 5/14/2023 18:54:21'!
Object subclass: #OOStack
	instanceVariableNames: 'lastElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: 'initialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:49:41'!
test01TheRoverDoesNotMoveWithEmptyCommand
	
	| actualPosition |
	self assert: actualPosition equals: initialPosition		
! !

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRoverTests category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:50:06' prior: 50632205!
test01TheRoverDoesNotMoveWithEmptyCommand
	
	| actualPosition initialPosition|
	
	
	
	self assert: actualPosition equals: initialPosition		
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:51:11' prior: 50632227!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	"self assert: actualPosition equals: initialPosition		"
! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:21'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:51:38' prior: 50632235!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover|
	
	rover := MarsRover new.
	
	self assert: rover actualPosition equals: rover initialPosition	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:52:47'!
actualPosition
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 18:54:22'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:52:55' prior: 50632257!
actualPosition
	^ actualPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:53:09'!
initialPosition
	self shouldBeImplemented.! !

!methodRemoval: MarsRover #initialPosition stamp: 'ma 5/14/2023 18:54:43'!
initialPosition
	self shouldBeImplemented.!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:56:38' prior: 50632249!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover new.
	initialPosition := rover actualPosition.
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:56:51' prior: 50632281!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover new.
	initialPosition := rover actualPosition.
	
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:57:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:57:08'!
moveTo: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 18:57:37' prior: 50632304!
moveTo: aCommandString 
	! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:57:45'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:57:45'!
PASSED!

----SNAPSHOT----(14 May 2023 18:57:49) CuisUniversity-5706.image priorSource: 9610903!

----SNAPSHOT----(14 May 2023 18:57:59) CuisUniversity-5706.image priorSource: 9621400!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:58:47'!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover initialPosition|
	
	rover := MarsRover new.
	initialPosition := rover actualPosition.
	
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:58:54' prior: 50632325!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover initialPosition|
	
	rover := MarsRover new.
	initialPosition := rover actualPosition.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: initialPosition
! !

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 18:59:02'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 18:59:02'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 18:59:02'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 18:59:51' prior: 50632335!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover initialPosition|
	
	rover := MarsRover at: 2@3.
	initialPosition := rover actualPosition.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: initialPosition
! !

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 18:59:53'!
ERROR!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:00:16' prior: 50632356!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3.
	initialPosition := rover actualPosition.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: initialPosition
! !

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:00:19'!
ERROR!

!classDefinition: 'MarsRover class' category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:00:25'!
MarsRover class
	instanceVariableNames: 'renameMe1'!
!MarsRover class methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:00:25'!
initializeAt: aRenameMe1 
	self shouldBeImplemented.
	renameMe1 := aRenameMe1.! !
!MarsRover class methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:01:50' prior: 50632389!
initializeAt: aPosition 
	
	self new initializeMarsRoverAtPosition: aPosition! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:02:13'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:02:13'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:02:13'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:02:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:02:29'!
initializeMarsRoverAtPosition: aPosition 
	self shouldBeImplemented.
	position := aPosition.! !
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:02:51' prior: 50632418!
initializeMarsRoverAtPosition: aPosition 
	
	actualPosition := aPosition.! !

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:02:57'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:02:57'!
ERROR!
!MarsRover class methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:03:31' prior: 50632395!
initializeAt: aPosition 
	
	^self new initializeMarsRoverAtPosition: aPosition! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:03:39'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:03:42'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:04:38' prior: 50632370!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3.
	initialPosition := rover actualPosition.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:05:17' prior: 50632450!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 3@3.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:05:48' prior: 50632460!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: #North.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 3@3.
	
! !
!MarsRover class methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:06:23'!
initializeAt: aPosition facing: aDirection
	
	^self new initializeMarsRoverAtPosition: aPosition facing: aDirection! !

!methodRemoval: MarsRover class #initializeAt: stamp: 'ma 5/14/2023 19:06:27'!
initializeAt: aPosition 
	
	^self new initializeMarsRoverAtPosition: aPosition!

Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:06:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:07:37'!
initializeMarsRoverAtPosition: aPosition facing: aDirection
	
	| actualDirection |
	actualPosition := aPosition.
	actualDirection := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:08:32' prior: 50632502!
initializeMarsRoverAtPosition: aPosition facing: aDirection
	
	actualPosition := aPosition.! !

!methodRemoval: MarsRover #initializeMarsRoverAtPosition: stamp: 'ma 5/14/2023 19:08:38'!
initializeMarsRoverAtPosition: aPosition 
	
	actualPosition := aPosition.!

Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition actualDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:08:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition actualDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 19:09:00' prior: 50632510!
initializeMarsRoverAtPosition: aPosition facing: aDirection
	
	actualPosition := aPosition.
	actualDirection := aDirection.! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:10:56' prior: 50632469!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: #North.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: #North.
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:11:20'!
actualDirection
	^ actualDirection ! !

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:11:37'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:12:48' prior: 50632291!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: #North. 
	initialPosition := rover actualPosition.
	
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:13:29' prior: 50632309!
moveTo: aCommandString 
	
	aCommandString = '' ifFalse: [
		^ 2@4	
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:13:46' prior: 50632571!
moveTo: aCommandString 
	
	aCommandString = '' ifFalse: [
		actualPosition := 2@4	
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:14:18' prior: 50632577!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		actualPosition := 2@3.	
	] ifFalse: [
		actualPosition := 2@4	
	] ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:14:23'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:14:23'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:15:01'!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert: rover actualPosition equals: 2@2.
	self assert: rover actualDirection equals: #North.
	
! !

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:15:03'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:15:40' prior: 50632597!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:15:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:16:50' prior: 50632583!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		actualPosition := 2@3.	
	] ifFalse: [
	
		aCommandString = 'f' ifTrue: [
			actualPosition := 2@4.
		] ifFalse: [
			actualPosition := 2@2.
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:16:51'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:16:51'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:16:51'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:18:32'!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:18:42' prior: 50632646!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: #North.
	
	rover moveTo: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:18:44'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:19:32' prior: 50632626!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		actualPosition := 2@3.	
	] ifFalse: [
	
		aCommandString = 'f' ifTrue: [
			actualPosition := actualPosition + 0@1.
		] ifFalse: [
			actualPosition := 2@2.
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:19:34'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:19:34'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:19:34'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:19:35'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:19:43'!
ERROR!

0@0 + 0@1!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:21:15' prior: 50632673!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		actualPosition := 2@3.	
	] ifFalse: [
	
		aCommandString = 'f' ifTrue: [
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := 2@2.
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:21:16'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:21:16'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:21:16'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:21:16'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:22:17'!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:22:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:23:00' prior: 50632702!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		actualPosition := 2@3.	
	] ifFalse: [
	
		aCommandString = 'f' ifTrue: [
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition - (0@1).
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:23:01'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:23:01'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:23:01'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:01'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:01'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:23:43'!
test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: #North.
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:23:50'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:23:50'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:23:50'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:50'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:50'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:50'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:23:50'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:24:04' prior: 50632743!
moveTo: aCommandString 
	
	aCommandString = '' ifTrue: [
		
	] ifFalse: [
	
		aCommandString = 'f' ifTrue: [
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition - (0@1).
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:24:07'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:24:07'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:24:07'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:07'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:07'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:07'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:24:21' prior: 50632811!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + (0@1).
	] ifFalse: [
		actualPosition := actualPosition - (0@1).
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:24:26'!
FAILURE!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:24:26'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:24:26'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:26'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:26'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:24:26'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:24:33'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:25:17' prior: 50632845!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + (0@1).
	] .
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition - (0@1).
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:25:18'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:25:18'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:25:18'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:25:18'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:25:18'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:25:18'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:26:03'!
test06TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:26:07'!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:26:28'!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test06TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:26:37'!
test06TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:26:42'!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: #North.
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:26:46'!
test05TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: #North.
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:28:15'!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #South.
	
	rover moveTo: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:28:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:31:05' prior: 50632881!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).]
		ifFalse: [
			actualPosition := actualPosition - (0@1).
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition - (0@1).
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:31:15' prior: 50632999!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition - (0@1).
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition - (0@1).
	].! !

----SNAPSHOT----(14 May 2023 19:31:20) CuisUniversity-5706.image priorSource: 9621488!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:31:22'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:31:22'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:31:22'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:31:23'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:31:23'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:31:23'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:31:23'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:31:57'!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #South.
	
	rover moveTo: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:32:07' prior: 50633054!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #South.
	
	rover moveTo: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:32:09'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:32:26' prior: 50633012!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition - (0@1).
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition - (0@1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:32:28'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:32:28'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:32:28'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:32:28'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:32:28'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:32:29'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:32:29'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:32:29'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:33:04' prior: 50633080!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition + (0@-1).
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition - (0@1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:33:05'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:33:05'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:33:18' prior: 50633127!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualPosition := actualPosition + (0@-1).
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@-1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:33:21'!
PASSED!

----SNAPSHOT----(14 May 2023 19:33:23) CuisUniversity-5706.image priorSource: 9643940!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:34:54'!
test08TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #East.
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:34:56'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:35:24'!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #East.
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test08TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:35:29'!
test08TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #East.
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:35:36'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:35:36'!
FAILURE!

----SNAPSHOT----(14 May 2023 19:35:41) CuisUniversity-5706.image priorSource: 9650223!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:36:41' prior: 50633174!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		] ifFalse: [
			actualDirection  = #South ifTrue: [
				actualPosition := actualPosition + (0@-1).
			] ifFalse: [
				actualPosition := actualPosition + (1@0).
			].
		]
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@-1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:36:46'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:36:46'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:37:17'!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: #East.
	
	rover moveTo: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:37:18'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:38:19' prior: 50633270!
moveTo: aCommandString 
	

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		].
		actualDirection  = #South ifTrue: [
			actualPosition := actualPosition + (0@-1).
		]. 
		actualDirection  = #East ifTrue: [
			actualPosition := actualPosition + (1@0).
		].
		actualDirection  = #West ifTrue: [
			actualPosition := actualPosition + (-1@0).
		].
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@-1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:38:23' prior: 50633338!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		].
		actualDirection  = #South ifTrue: [
			actualPosition := actualPosition + (0@-1).
		]. 
		actualDirection  = #East ifTrue: [
			actualPosition := actualPosition + (1@0).
		].
		actualDirection  = #West ifTrue: [
			actualPosition := actualPosition + (-1@0).
		].
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@-1).
		] ifFalse: [
			actualPosition := actualPosition + (0@1).
		]
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:38:36'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:38:36'!
FAILURE!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:38:36'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:38:57' prior: 50633360!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@1).
		].
		actualDirection  = #South ifTrue: [
			actualPosition := actualPosition + (0@-1).
		]. 
		actualDirection  = #East ifTrue: [
			actualPosition := actualPosition + (1@0).
		].
		actualDirection  = #West ifTrue: [
			actualPosition := actualPosition + (-1@0).
		].
	] .

	aCommandString = 'b' ifTrue: [
		actualDirection = #North ifTrue:[
			actualPosition := actualPosition + (0@-1).
		].
		actualDirection  = #South ifTrue: [
			actualPosition := actualPosition + (0@1).
		]. 
		actualDirection  = #East ifTrue: [
			actualPosition := actualPosition + (-1@0).
		].
		actualDirection  = #West ifTrue: [
			actualPosition := actualPosition + (1@0).
		].
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:38:59'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:38:59'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:38:59'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:38:59'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:38:59'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:39:00'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:39:00'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:39:00'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:39:00'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:39:00'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:40:46' prior: 50633425!
moveTo: aCommandString 

	actualPosition := actualPosition + (0@1).
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:42:26' prior: 50633492!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:42:35'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:42:35'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:42:35'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:42:37'!
ERROR!

Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #CardinalDirection category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:43:15'!
Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:44:50' prior: 50632560!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: CardinalDirection at: #North. 
	initialPosition := rover actualPosition.
	
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:44:59' prior: 50632542!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: CardinalDirection at: #North.
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: #North.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:03' prior: 50632611!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: CardinalDirection at: #North.
	
	rover moveTo: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:07' prior: 50632657!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: CardinalDirection at: #North.
	
	rover moveTo: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:10' prior: 50632937!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: CardinalDirection at: #North.
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:13' prior: 50632961!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: CardinalDirection at: #North.
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:19' prior: 50632984!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: CardinalDirection at: #South.
	
	rover moveTo: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:28' prior: 50633065!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: CardinalDirection at: #South.
	
	rover moveTo: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:31' prior: 50633237!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: CardinalDirection at: #East.
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:45:34' prior: 50633323!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: CardinalDirection at: #East.
	
	rover moveTo: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !
!CardinalDirection class methodsFor: 'nil' stamp: 'ma 5/14/2023 19:46:16' overrides: 16901507!
at: aDirection

	^ self new initializeWith: aDirection ! !

!classDefinition: #CardinalDirection category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 19:47:05'!
Object subclass: #CardinalDirection
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!CardinalDirection methodsFor: 'nil' stamp: 'ma 5/14/2023 19:47:03'!
initializeWith: aDirection

	direction := aDirection ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:47:44'!
ERROR!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:47:45'!
ERROR!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:48:11'!
ERROR!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:48:13'!
ERROR!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:28' prior: 50633563!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North). 
	initialPosition := rover actualPosition.
	
	rover moveTo: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:33' prior: 50633575!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: #North.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:38' prior: 50633586!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:43' prior: 50633597!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:48' prior: 50633609!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:48:54' prior: 50633621!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: #North equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:49:00' prior: 50633633!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:49:06' prior: 50633645!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: #South equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:49:11' prior: 50633657!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:49:17' prior: 50633669!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover moveTo: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: #East equals: rover actualDirection.
	
! !

----SNAPSHOT----(14 May 2023 19:49:18) CuisUniversity-5706.image priorSource: 9651712!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:49:23'!
ERROR!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:49:31'!
directionToMoveBackward
	self shouldBeImplemented.! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:50:24' prior: 50633906!
directionToMoveBackward
	
	direction = #North ifTrue: [
		^ (0@-1)	
	].! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:51:11' prior: 50633911!
directionToMoveBackward
	
	direction = #North ifTrue: [
		^ (0@-1)	
	].
	direction = #South ifTrue: [
		^ (0@1)	
	].
	direction = #East ifTrue: [
		^ (-1@0)	
	].
	direction = #West ifTrue: [
		^ (1@0)	
	].! !

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:51:14'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:51:30' prior: 50633794!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: (CardinalDirection at: #North).
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:51:41' prior: 50633805!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:51:46' prior: 50633816!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:51:49' prior: 50633828!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:51:53' prior: 50633840!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:52:05' prior: 50633864!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:52:13' prior: 50633852!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:52:20' prior: 50633876!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover moveTo: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 19:52:27' prior: 50633888!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover moveTo: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:52:29'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:21'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:21'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:26'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:32'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:36'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:44'!
ERROR!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:55:51'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:55:51'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:55:51'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:51'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:51'!
FAILURE!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:55:51'!
FAILURE!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:55:51'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:55:51'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:55:51'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:55:52'!
FAILURE!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:55:54'!
ERROR!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:56:07'!
directionToMoveForward
	self shouldBeImplemented.! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:56:59' prior: 50634114!
directionToMoveForward
	
	direction = #North ifTrue: [
		^ (0@1)	
	].
	direction = #South ifTrue: [
		^ (0@-1)	
	].
	direction = #East ifTrue: [
		^ (1@0)	
	].
	direction = #West ifTrue: [
		^ (-1@0)	
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:57:04'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:57:04'!
FAILURE!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:57:08'!
FAILURE!

rover actualDirection!

(CardinalDirection at: #North)!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:57:56'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:58:04'!
FAILURE!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:58:23'!
PASSED!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:59:14' overrides: 16901772!
= aCardinalDirection

	^ direction = aCardinalDirection direction ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 19:59:22'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 19:59:22'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:59:24'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 19:59:35'!
ERROR!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:59:40'!
direction
	self shouldBeImplemented.
	^direction! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 19:59:46' prior: 50634235!
direction
	^direction! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:00:02'!
PASSED!

----SNAPSHOT----(14 May 2023 20:00:15) CuisUniversity-5706.image priorSource: 9671955!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:00:46' prior: 50633917!
directionToMoveBackward
	
	self directionToMoveForward * (-1)! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:00:54' prior: 50634286!
directionToMoveBackward
	
	^self directionToMoveForward * (-1)! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:00:57'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:00:57'!
PASSED!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:01:10' prior: 50634292!
directionToMoveBackward
	
	^self directionToMoveForward negated! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:01:14'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:01:14'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:03:43'!
test11TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #West) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:03:48'!
FAILURE!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:05:16'!
FAILURE!

CardinalDirection at: #West!

rover actualDirection.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:07:30' prior: 50633498!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := CardinalDirection at: #West
	].
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:07:33'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:07:33'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:08:15'!
test12TheRoverRotatesToLeftWhenFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:08:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:09:21' prior: 50634400!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection = #North ifTrue:[		actualDirection := CardinalDirection at: #West].
		actualDirection = #South ifTrue:[		actualDirection := CardinalDirection at: #East]
	].
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:09:24'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:09:24'!
ERROR!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:09:24'!
ERROR!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:09:30'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:11:26' prior: 50634471!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection = (CardinalDirection at: #North) ifTrue:[		actualDirection := CardinalDirection at: #West].
		actualDirection = (CardinalDirection at: #South) ifTrue:[		actualDirection := CardinalDirection at: #East]
	].
! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:11:27'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:11:27'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:11:56'!
test12TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:00'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:12:10'!
test13TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:16'!
test12TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:19'!
FAILURE!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:19'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:12:49' prior: 50634538!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection = (CardinalDirection at: #North) ifTrue:[		actualDirection := CardinalDirection at: #West].
		actualDirection = (CardinalDirection at: #South) ifTrue:[		actualDirection := CardinalDirection at: #East]
	].
	aCommandString = 'r' ifTrue: [
		actualDirection = (CardinalDirection at: #North) ifTrue:[		actualDirection := CardinalDirection at: #East].
		actualDirection = (CardinalDirection at: #South) ifTrue:[		actualDirection := CardinalDirection at: #West]
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:12:51'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:12:51'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:14:20' prior: 50634649!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection = actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection = (CardinalDirection at: #North) ifTrue:[		actualDirection := CardinalDirection at: #East].
		actualDirection = (CardinalDirection at: #South) ifTrue:[		actualDirection := CardinalDirection at: #West]
	].

! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:16:18'!
directionToRotateLeft
	
	direction = #North ifTrue: [
		^ CardinalDirection at: #West	
	].
	direction = #South ifTrue: [
		^ CardinalDirection at: #East
	].
	direction = #East ifTrue: [
		^ CardinalDirection at: #North
	].
	direction = #West ifTrue: [
		^ CardinalDirection at: #South
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:16:21'!
FAILURE!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:16:21'!
FAILURE!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:16:21'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:16:23'!
FAILURE!

rover actualDirection.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:17:03' prior: 50634726!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection = (CardinalDirection at: #North) ifTrue:[		actualDirection := CardinalDirection at: #East].
		actualDirection = (CardinalDirection at: #South) ifTrue:[		actualDirection := CardinalDirection at: #West]
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:17:07'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:17:07'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:17:36' prior: 50634814!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].

! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:18:01'!
directionToRotateRight
	
	direction = #North ifTrue: [
		^ CardinalDirection at: #East	
	].
	direction = #South ifTrue: [
		^ CardinalDirection at: #West
	].
	direction = #East ifTrue: [
		^ CardinalDirection at: #South
	].
	direction = #West ifTrue: [
		^ CardinalDirection at: #North
	].! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:18:03'!
PASSED!

----SNAPSHOT----(14 May 2023 20:18:17) CuisUniversity-5706.image priorSource: 9684209!

----SNAPSHOT----(14 May 2023 20:18:23) CuisUniversity-5706.image priorSource: 9706026!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:19:58'!
test14TheRoverMovesForwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'ff'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:20:06'!
FAILURE!

'puta' at: 0!

'puta' at: 1!

'puta' at: 2!

'puta' at: 3!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:22:04' prior: 50634886!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].
	aCommandString = 'ff' ifTrue: [
		actualPosition := actualPosition + 2*(actualDirection directionToMoveForward).
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:22:07'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:22:08'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:22:08'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:22:23'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:22:23'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:23:12' prior: 50634987!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].
	aCommandString = 'ff' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveForward)).
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:23:13'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:23:14'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:23:49'!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'bb'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:24:03' prior: 50635144!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'bb'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:24:08'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:25:03' prior: 50635071!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].
	aCommandString = 'ff' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveForward)).
	].
	aCommandString = 'bb' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveBackward)).

	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:25:04'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:25:04'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:25:04'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:25:04'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:25:04'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:25:05'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:25:58'!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:26:00'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:26:44' prior: 50635172!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].
	aCommandString = 'ff' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveForward)).
	].
	aCommandString = 'bb' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveBackward)).
	].

! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:28:41'!
test17TheRoverMovesForwardTwiceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'ff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:28:42'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:30:43'!
test18TheRoverMovesForwardThriceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:30:46'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:32:12' prior: 50635328!
moveTo: aCommandString 

	aCommandString = 'f' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveForward.
	].
	aCommandString = 'b' ifTrue: [
		actualPosition := actualPosition + actualDirection directionToMoveBackward.
	].
	aCommandString = 'l' ifTrue: [
		actualDirection := actualDirection directionToRotateLeft.
	].
	aCommandString = 'r' ifTrue: [
		actualDirection := actualDirection directionToRotateRight.
	].
	aCommandString = 'ff' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveForward)).
	].
	aCommandString = 'fff' ifTrue: [
		actualPosition := actualPosition + (3*(actualDirection directionToMoveForward)).
	].
	aCommandString = 'bb' ifTrue: [
		actualPosition := actualPosition + (2*(actualDirection directionToMoveBackward)).
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:32:14'!
PASSED!

----SNAPSHOT----(14 May 2023 20:32:17) CuisUniversity-5706.image priorSource: 9706114!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:33:15'!
test18TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:33:20'!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test18TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:33:25'!
test18TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:33:45' prior: 50635555!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'ffb'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:34:06' prior: 50635581!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:34:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:35:32' prior: 50635446!
moveTo: aCommandString 
	
	aCommandString do: [ :command | 
		
		aCommandString = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		aCommandString = 'b' ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		aCommandString = 'l' ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		aCommandString = 'r' ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:35:48' prior: 50635611!
moveTo: aCommandString 
	
	aCommandString do: [ :command | 
		
		aCommandString = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		aCommandString = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		aCommandString = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		aCommandString = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:35:56'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:35:56'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:35:56'!
FAILURE!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:35:57'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:35:57'!
FAILURE!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:35:59'!
FAILURE!

rover actualPosition!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:36:48' prior: 50635630!
moveTo: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:36:49'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:39:39'!
test20
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'frfrfrf'.
	
	self assert:  2@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test20 stamp: 'ma 5/14/2023 20:39:40'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:40:21' prior: 50635812!
test20
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'frfrfrfr'.
	
	self assert:  2@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test20 stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!testRun: #MarsRoverTests #test20 stamp: 'ma 5/14/2023 20:40:24'!
PASSED!

!methodRemoval: MarsRoverTests #test20 stamp: 'ma 5/14/2023 20:40:28'!
test20
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'frfrfrfr'.
	
	self assert:  2@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:41:38'!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover moveTo: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:42:50' prior: 50635922!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:43:04' prior: 50635934!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f@'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStops stamp: 'ma 5/14/2023 20:43:07'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:43:13' prior: 50635946!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f@'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:43:16' prior: 50635962!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStops stamp: 'ma 5/14/2023 20:43:22'!
FAILURE!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:43:54'!
test20TheRoverReceivesInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!methodRemoval: MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStops stamp: 'ma 5/14/2023 20:43:56'!
test20TheRoverReceivesInvalidCommandAndStops
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover moveTo: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21'!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
	].

! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635156!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'bb'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633954!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635594!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633782!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North). 
	initialPosition := rover actualPosition.
	
	rover readCommand: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634617!
test13TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635430!
test18TheRoverMovesForwardThriceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633930!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: (CardinalDirection at: #North).
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634018!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover readCommand: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634455!
test12TheRoverRotatesToLeftWhenFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634969!
test14TheRoverMovesForwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'ff'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634006!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633980!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634030!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #East).
	
	rover readCommand: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633942!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635352!
test17TheRoverMovesForwardTwiceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'ff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50634379!
test11TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #West) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633967!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635252!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50633993!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection at: #South).
	
	rover readCommand: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: (CardinalDirection at: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:21' prior: 50635989!
test20TheRoverReceivesInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!methodRemoval: MarsRover #moveTo: stamp: 'ma 5/14/2023 20:47:21'!
moveTo: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
	].

!

----SNAPSHOT----(14 May 2023 20:47:26) CuisUniversity-5706.image priorSource: 9724484!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:47:29'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:47:30'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:47:30'!
FAILURE!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:47:30'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 20:47:59'!
initializeAt: aPosition facing: aDirection
	
	actualPosition := aPosition.
	actualDirection := aDirection.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:47:59' prior: 50632478!
initializeAt: aPosition facing: aDirection
	
	^self new initializeAt: aPosition facing: aDirection! !

!methodRemoval: MarsRover #initializeMarsRoverAtPosition:facing: stamp: 'ma 5/14/2023 20:47:59'!
initializeMarsRoverAtPosition: aPosition facing: aDirection
	
	actualPosition := aPosition.
	actualDirection := aDirection.!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:48:00'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:48:00'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:48:00'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:00'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:00'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:48:01'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:48:01'!
FAILURE!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:48:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:48:24' prior: 50636014!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		command = $@ ifTrue: [
			
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:48:34'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:48:34'!
FAILURE!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:48:34'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:48:47' prior: 50636491!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		command = $@ ifTrue: [
			^ true
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:48:49' prior: 50636589!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		command = $@ ifTrue: [
			^ true.
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:48:50'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:48:50'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:48:51'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:48:51'!
PASSED!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:49:21'!
test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'f#f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:49:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:51:46' prior: 50636609!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		#($f $b $l $r) includes: command ifFalse: [
			^ true.
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 20:53:21' prior: 50636720!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:53:30'!
PASSED!

----SNAPSHOT----(14 May 2023 20:54:56) CuisUniversity-5706.image priorSource: 9749107!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:58:38'!
test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'f#f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 20:59:04' prior: 50636841!
test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection at: #North).
	
	rover readCommand: 'frfrfrfr'.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: (CardinalDirection at: #North) equals: rover actualDirection.
	
! !

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 20:59:15'!
PASSED!

CardinalDirection subclass: #North
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalDirection subclass: #North
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #North category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 21:04:17'!
CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #South category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 21:04:21'!
CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #East category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 21:04:45'!
CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #West category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 21:04:51'!
CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

----SNAPSHOT----(14 May 2023 21:05:07) CuisUniversity-5706.image priorSource: 9766006!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:05:36' prior: 50634119!
directionToMoveForward
	
	self subclassResponsibility ! !
!North methodsFor: 'nil' stamp: 'ma 5/14/2023 21:06:36' overrides: 50637013!
directionToMoveForward

	^ (0@1)	
! !
!North methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:07:04' overrides: 50634336!
directionToMoveBackward

	^ self directionToMoveForward negated
! !
!South methodsFor: 'nil' stamp: 'ma 5/14/2023 21:07:34' overrides: 50637013!
directionToMoveForward

	^ (0@-1)	
! !
!South methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:07:49' overrides: 50634336!
directionToMoveBackward

	^ self directionToMoveForward negated.
! !
!East methodsFor: 'nil' stamp: 'ma 5/14/2023 21:08:47' overrides: 50637013!
directionToMoveForward

	^ (1@0)	
! !
!East methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:08:57' overrides: 50634336!
directionToMoveBackward

	^ self directionToMoveForward negated
! !
!West methodsFor: 'nil' stamp: 'ma 5/14/2023 21:09:09' overrides: 50637013!
directionToMoveForward

	^ (-1@0)
! !
!West methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:09:18' overrides: 50634336!
directionToMoveBackward

	^ self directionToMoveForward negated
! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:09:32' prior: 50634336!
directionToMoveBackward
	
	^ self subclassResponsibility ! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11'!
pointing: aDirection

	^ self new initializeWith: aDirection ! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636123!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #East).
	
	rover readCommand: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636032!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'bb'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636110!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: (CardinalDirection pointing: #North).
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636189!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #East).
	
	rover readCommand: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636281!
test20TheRoverReceivesInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636215!
test17TheRoverMovesForwardTwiceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'ff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636084!
test13TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636228!
test11TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #West) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636136!
test12TheRoverRotatesToLeftWhenFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #East) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636255!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50634748!
directionToRotateLeft
	
	direction = #North ifTrue: [
		^ CardinalDirection pointing: #West	
	].
	direction = #South ifTrue: [
		^ CardinalDirection pointing: #East
	].
	direction = #East ifTrue: [
		^ CardinalDirection pointing: #North
	].
	direction = #West ifTrue: [
		^ CardinalDirection pointing: #South
	].! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636202!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636854!
test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'frfrfrfr'.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636149!
test14TheRoverMovesForwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'ff'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636175!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636162!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636241!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636072!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection pointing: #North). 
	initialPosition := rover actualPosition.
	
	rover readCommand: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636268!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636059!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #South) equals: rover actualDirection.
	
! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50634903!
directionToRotateRight
	
	direction = #North ifTrue: [
		^ CardinalDirection pointing: #East	
	].
	direction = #South ifTrue: [
		^ CardinalDirection pointing: #West
	].
	direction = #East ifTrue: [
		^ CardinalDirection pointing: #South
	].
	direction = #West ifTrue: [
		^ CardinalDirection pointing: #North
	].! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636097!
test18TheRoverMovesForwardThriceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: (CardinalDirection pointing: #South).
	
	rover readCommand: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #South) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:11' prior: 50636045!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:12' prior: 50636702!
test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: (CardinalDirection pointing: #North).
	
	rover readCommand: 'f#f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !

!methodRemoval: CardinalDirection class #at: stamp: 'ma 5/14/2023 21:10:12'!
at: aDirection

	^ self new initializeWith: aDirection !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 21:10:13'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 21:10:13'!
ERROR!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 21:10:13'!
ERROR!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:10:13'!
ERROR!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:10:13'!
ERROR!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:10:14'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:10:14'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:10:14'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 21:10:14'!
ERROR!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 21:10:15'!
ERROR!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:10:42' prior: 50637059!
directionToMoveBackward
	
	self subclassResponsibility ! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:11:01' prior: 50637337!
directionToRotateRight
	
	self subclassResponsibility ! !
!North methodsFor: 'nil' stamp: 'ma 5/14/2023 21:11:12' overrides: 50637486!
directionToRotateRight
	
	^ CardinalDirection pointing: #East	
! !
!North methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:11:28' overrides: 50637201!
directionToRotateLeft
	
	^ CardinalDirection pointing: #West	
! !
!South methodsFor: 'nil' stamp: 'ma 5/14/2023 21:11:40' overrides: 50637486!
directionToRotateRight
	
	^ CardinalDirection pointing: #West
! !
!South methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:11:45' overrides: 50637201!
directionToRotateLeft
	
	^ CardinalDirection pointing: #East
! !
!East methodsFor: 'nil' stamp: 'ma 5/14/2023 21:12:07' overrides: 50637486!
directionToRotateRight
	
	^ CardinalDirection pointing: #South
! !
!East methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:12:19' overrides: 50637201!
directionToRotateLeft
	
	^ CardinalDirection pointing: #North
! !
!West methodsFor: 'nil' stamp: 'ma 5/14/2023 21:12:27' overrides: 50637486!
directionToRotateRight
	
	^ CardinalDirection pointing: #North
! !
!West methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:12:35' overrides: 50637201!
directionToRotateLeft
	
	^ CardinalDirection pointing: #South
! !
!North class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:01' overrides: 50637064!
pointing: aDirection

	^ self new initializeWith: aDirection ! !
!South class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:01' overrides: 50637064!
pointing: aDirection

	^ self new initializeWith: aDirection ! !
!East class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:01' overrides: 50637064!
pointing: aDirection

	^ self new initializeWith: aDirection ! !
!West class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:01' overrides: 50637064!
pointing: aDirection

	^ self new initializeWith: aDirection ! !

!methodRemoval: CardinalDirection class #pointing: stamp: 'ma 5/14/2023 21:13:01'!
pointing: aDirection

	^ self new initializeWith: aDirection !
!CardinalDirection class methodsFor: 'nil' stamp: 'ma 5/14/2023 21:13:20'!
pointing: aDirection
	
	self subclassResponsibility ! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:49' prior: 50637201!
directionToRotateLeft
	
	self subclassResponsibility ! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:13:56' prior: 50634240!
direction

	^direction! !
!North class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:15:07' overrides: 16785646!
new

	^ self new initializeWith: #North ! !

!methodRemoval: North class #pointing: stamp: 'ma 5/14/2023 21:15:10'!
pointing: aDirection

	^ self new initializeWith: aDirection !
!East class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:15:17' overrides: 16785646!
new

	^ self new initializeWith: #East ! !

!methodRemoval: East class #pointing: stamp: 'ma 5/14/2023 21:15:20'!
pointing: aDirection

	^ self new initializeWith: aDirection !
!South class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:15:27' overrides: 16785646!
new

	^ self new initializeWith: #South ! !

!methodRemoval: South class #pointing: stamp: 'ma 5/14/2023 21:15:29'!
pointing: aDirection

	^ self new initializeWith: aDirection !
!West class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:15:34' overrides: 16785646!
new

	^ self new initializeWith: #West ! !

!methodRemoval: West class #pointing: stamp: 'ma 5/14/2023 21:15:36'!
pointing: aDirection

	^ self new initializeWith: aDirection !

----SNAPSHOT----(14 May 2023 21:15:46) CuisUniversity-5706.image priorSource: 9771475!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:05' prior: 50637296!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: North new. 
	initialPosition := rover actualPosition.
	
	rover readCommand: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:13' prior: 50637096!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: North new.
	
	rover readCommand: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: North new.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:22' prior: 50637214!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: North new.
	
	rover readCommand: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:32' prior: 50637363!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommand: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:38' prior: 50637282!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommand: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:16:47' prior: 50637254!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommand: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:17:03' prior: 50637268!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommand: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:17:12' prior: 50637309!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommand: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:17:24' prior: 50637070!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: East new.
	
	rover readCommand: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:17:33' prior: 50637109!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: East new.
	
	rover readCommand: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:17:47' prior: 50637162!
test11TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: West new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:12' prior: 50637175!
test12TheRoverRotatesToLeftWhenFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommand: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:21' prior: 50637149!
test13TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommand: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:38' prior: 50637241!
test14TheRoverMovesForwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommand: 'ff'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:51' prior: 50637083!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: North new.
	
	rover readCommand: 'bb'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:56' prior: 50637188!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: North new.
	
	rover readCommand: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: (CardinalDirection pointing: #North) equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:18:59' prior: 50637779!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: North new.
	
	rover readCommand: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:19:11' prior: 50637136!
test17TheRoverMovesForwardTwiceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: South new.
	
	rover readCommand: 'ff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:19:21' prior: 50637350!
test18TheRoverMovesForwardThriceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: South new.
	
	rover readCommand: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:19:31' prior: 50637323!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: South new.
	
	rover readCommand: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:19:54' prior: 50637122!
test20TheRoverReceivesInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommand: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:20:06' prior: 50637377!
test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommand: 'f#f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 21:20:19' prior: 50637227!
test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommand: 'frfrfrfr'.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!North class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:20:49' prior: 50637573 overrides: 16785646!
new

	^ self basicNew initializeWith: #North ! !
!East class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:20:56' prior: 50637582 overrides: 16785646!
new

	^ self basicNew initializeWith: #East ! !
!South class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:21:01' prior: 50637591 overrides: 16785646!
new

	^ self basicNew initializeWith: #South ! !
!West class methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:21:04' prior: 50637600 overrides: 16785646!
new

	^ self basicNew initializeWith: #West ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:21:05'!
ERROR!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
ERROR!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:21:05'!
ERROR!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:21:05'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 21:21:05'!
ERROR!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:21:09'!
ERROR!
!East methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:21:39' prior: 50637516 overrides: 50637564!
directionToRotateLeft
	
	^ North new
! !
!East methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:21:43' prior: 50637511 overrides: 50637486!
directionToRotateRight
	
	^ South new
! !
!North methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:21:48' prior: 50637496 overrides: 50637564!
directionToRotateLeft
	
	^ West new
! !
!North methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:22:03' prior: 50637491 overrides: 50637486!
directionToRotateRight
	
	^ East new
! !
!South methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:22:21' prior: 50637506 overrides: 50637564!
directionToRotateLeft
	
	^ East new
! !
!South methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:22:27' prior: 50637501 overrides: 50637486!
directionToRotateRight
	
	^ West new
! !
!West methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:22:33' prior: 50637526 overrides: 50637564!
directionToRotateLeft
	
	^ South new
! !
!West methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 21:22:39' prior: 50637521 overrides: 50637486!
directionToRotateRight
	
	^ North new
! !

----SNAPSHOT----(14 May 2023 21:23:00) CuisUniversity-5706.image priorSource: 9790640!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 21:23:21'!
PASSED!

----SNAPSHOT----(14 May 2023 21:23:25) CuisUniversity-5706.image priorSource: 9803849!

----SNAPSHOT----(14 May 2023 21:24:24) CuisUniversity-5706.image priorSource: 9806588!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 22:43:38'!
PASSED!

#var!

#var!

#var!

dicc at: 1!

dicc at: '1'.!

dicc at: 'caca' put: 3.!

dicc at: 'caca' put: '3'.!

|dicc var|

c := Dictionary new.

dicc at: 'caca' put: '3'.!

t: '!

|dicc|

dicc := Dictionary new.

dicc at: 'caca' put: '3'.!

dicc at: #caca put: '3'.!

----SNAPSHOT----(14 May 2023 22:55:58) CuisUniversity-5706.image priorSource: 9806676!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 22:58:51'!
test23xxx
	
	|dicc |
	
	dicc := Dictionary new.
	
	dicc at: #f put: 'hola'.

! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:00:03' prior: 50638206!
test23xxx
	
	|dicc |
	
	dicc := Dictionary new.
	
	dicc at: #f put: 'hola'.
	
	dicc at: #f ifAbsent:['chau'] 

! !

dicc at: #f ifAbsent:['chau'] !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:01:01' prior: 50638212!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: #f put: 'hola'.
	
	dicc at: #comando ifAbsent:['chau'] 

! !

dicc at: #comando ifAbsent:['chau']!
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:01:39' prior: 50638220!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: #f put: 'hola'.
	
	dicc at: 'comando' ifAbsent:['chau'] 

! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:01:52' prior: 50638229!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: 'comando' put: 'hola'.
	
	dicc at: 'comando' ifAbsent:['chau'] 

! !

dicc at: 'comando' ifAbsent:['chau'] !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:02:53' prior: 50638237!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: 'comando' put: 'hola'.
	
	dicc at: $f asString ifAbsent:['chau'] 

! !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:03:34' prior: 50638246!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: ($f asString) put: 'hola'.
	
	dicc at: ($f asString) ifAbsent:['chau'] 

! !

dicc at: ($f asString) ifAbsent:['chau'] !
!MarsRoverTests methodsFor: 'nil' stamp: 'ma 5/14/2023 23:04:12' prior: 50638254!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: $f put: 'hola'.
	
	dicc at: $f ifAbsent:['chau'] 

! !

dicc at: $f ifAbsent:['chau'] !

!methodRemoval: MarsRoverTests #test23xxx stamp: 'ma 5/14/2023 23:04:53'!
test23xxx
	
	|dicc comando|
	
	comando := $f.
	
	dicc := Dictionary new.
	
	dicc at: $f put: 'hola'.
	
	dicc at: $f ifAbsent:['chau'] 

!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:05:39'!
moveForward

	^ actualPosition := actualPosition + actualDirection directionToMoveForward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:05:39' prior: 50636740!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			actualPosition := actualPosition + actualDirection directionToMoveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:05:53'!
moveBackward

	^ actualPosition := actualPosition + actualDirection directionToMoveBackward! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:05:53' prior: 50638284!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			actualDirection := actualDirection directionToRotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:06:08'!
rotateLeft

	^ actualDirection := actualDirection directionToRotateLeft! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:06:08' prior: 50638308!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			self rotateLeft.
		].
		command = $r ifTrue: [
			actualDirection := actualDirection directionToRotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		].
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:06:22'!
rotateRight

	^ actualDirection := actualDirection directionToRotateRight! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:06:23' prior: 50638330!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			self rotateLeft.
		].
		command = $r ifTrue: [
			self rotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		].
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:06:24'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:06:25'!
PASSED!

----SNAPSHOT----(14 May 2023 23:06:27) CuisUniversity-5706.image priorSource: 9809676!

MarsRover class
	instanceVariableNames: ''!

!classDefinition: 'MarsRover class' category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 23:07:23'!
MarsRover class
	instanceVariableNames: ''!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:07:27'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition actualDirection commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classDefinition: #MarsRover category: 'MarsRover-Exercise' stamp: 'ma 5/14/2023 23:08:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'actualPosition actualDirection commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!
!MarsRover class methodsFor: 'nil' stamp: 'ma 5/14/2023 23:11:04'!
commandsDictionary

	|commandDictionary|
	
	commandDictionary := Dictionary new.
	commandDictionary at: $f put: [self moveForward.].! !
!MarsRover methodsFor: 'initialization' stamp: 'ma 5/14/2023 23:14:03' prior: 50636392!
initializeAt: aPosition facing: aDirection
	
	actualPosition := aPosition.
	actualDirection := aDirection.
	commands := Dictionary new.
	
	commands at: $f put: [self moveForward ];
			at: $b put: [self moveBackward ];
			at: $l put: [self rotateLeft ];
			at: $r put: [self rotateRight ].! !

!methodRemoval: MarsRover class #commandsDictionary stamp: 'ma 5/14/2023 23:14:08'!
commandsDictionary

	|commandDictionary|
	
	commandDictionary := Dictionary new.
	commandDictionary at: $f put: [self moveForward.].!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:15:36' prior: 50638351!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		commands at: aCommandString ifAbsent: [^self].
		
		"command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			self rotateLeft.
		].
		command = $r ifTrue: [
			self rotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		]."
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:15:46' prior: 50638578!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		commands at: command ifAbsent: [^self].
		
		"command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			self rotateLeft.
		].
		command = $r ifTrue: [
			self rotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		]."
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:16:14' prior: 50638594!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		(commands at: command ifAbsent: [^self]) value.
		
		"command = $f ifTrue: [
			self moveForward.
		].
		command = $b ifTrue: [
			self moveBackward.
		].
		command = $l ifTrue: [
			self rotateLeft.
		].
		command = $r ifTrue: [
			self rotateRight.
		].
		(#($f $b $l $r) includes: command) ifFalse: [
			^ true.
		]."
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:16:18'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:16:19'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:16:19'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:16:42' prior: 50638610!
readCommand: aCommandString 
	
	aCommandString do: [ :command | 
		
		(commands at: command ifAbsent: [^self]) value.
	].

! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:16:45'!
PASSED!

----SNAPSHOT----(14 May 2023 23:17:57) CuisUniversity-5706.image priorSource: 9817491!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:18:24' prior: 50638709!
readCommand: aCommandString 
	
	aCommandString do: [ :aCommand | 
		
		(commands at: aCommand ifAbsent: [^self]) value.
	].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:31'!
readCommandPackage: aCommandString 
	
	aCommandString do: [ :aCommand | 
		
		(commands at: aCommand ifAbsent: [^self]) value.
	].

! !

!methodRemoval: MarsRover #readCommandPackage: stamp: 'ma 5/14/2023 23:19:36'!
readCommandPackage: aCommandString 
	
	aCommandString do: [ :aCommand | 
		
		(commands at: aCommand ifAbsent: [^self]) value.
	].

!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57'!
readCommandPackage: aCommandString 
	
	aCommandString do: [ :aCommand | 
		
		(commands at: aCommand ifAbsent: [^self]) value.
	].

! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637768!
test15TheRoverMovesBackwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: North new.
	
	rover readCommandPackage: 'bb'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637859!
test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommandPackage: 'frfrfrfr'.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637835!
test20TheRoverReceivesInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommandPackage: 'f@f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637622!
test02TheRoverMovesWithSingleForwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: North new.
	
	rover readCommandPackage: 'f'.
	
	self assert: rover actualPosition equals: 2@4.
	self assert: rover actualDirection equals: North new.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637802!
test17TheRoverMovesForwardTwiceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: South new.
	
	rover readCommandPackage: 'ff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637824!
test19TheRoverMovesForwardTwiceAndBackwardFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: South new.
	
	rover readCommandPackage: 'ffb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637680!
test07TheRoverMovesWithSingleForwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommandPackage: 'f'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637702!
test09TheRoverMovesWithSingleForwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: East new.
	
	rover readCommandPackage: 'f'.
	
	self assert:  2@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637611!
test01TheRoverDoesNotMoveWithEmptyCommand	
	
	|rover initialPosition|
	
	rover := MarsRover initializeAt: 2@3 facing: North new. 
	initialPosition := rover actualPosition.
	
	rover readCommandPackage: ''.
	
	self assert: rover actualPosition equals: initialPosition
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637691!
test08TheRoverMovesWithSingleBackwardCommandFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommandPackage: 'b'.
	
	self assert:  1@2 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637735!
test12TheRoverRotatesToLeftWhenFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: South new.
	
	rover readCommandPackage: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637724!
test11TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommandPackage: 'l'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: West new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637746!
test13TheRoverRotatesToLeftWhenFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommandPackage: 'r'.
	
	self assert:  1@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637813!
test18TheRoverMovesForwardThriceFacingSouth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: South new.
	
	rover readCommandPackage: 'fff'.
	
	self assert:  2@0 equals: rover actualPosition.
	self assert: South new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637791!
test16TheRoverMovesForwardAndBackwardFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 2@2 facing: North new.
	
	rover readCommandPackage: 'fb'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637713!
test10TheRoverMovesWithSingleBackwardCommandFacingEast
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: East new.
	
	rover readCommandPackage: 'b'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: East new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637656!
test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommandPackage: 'b'.
	
	self assert:  1@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637847!
test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommandPackage: 'f#f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637644!
test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommandPackage: 'f'.
	
	self assert:  0@1 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637633!
test03TheRoverMovesWithSingleBackwardCommand
	
	|rover |
	
	rover := MarsRover initializeAt: 2@3 facing: North new.
	
	rover readCommandPackage: 'b'.
	
	self assert:  2@2 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637668!
test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition
	
	|rover |
	
	rover := MarsRover initializeAt: 0@0 facing: North new.
	
	rover readCommandPackage: ''.
	
	self assert:  0@0 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:19:57' prior: 50637757!
test14TheRoverMovesForwardTwiceFacingNorth
	
	|rover |
	
	rover := MarsRover initializeAt: 1@1 facing: North new.
	
	rover readCommandPackage: 'ff'.
	
	self assert:  1@3 equals: rover actualPosition.
	self assert: North new equals: rover actualDirection.
	
! !

!methodRemoval: MarsRover #readCommand: stamp: 'ma 5/14/2023 23:19:57'!
readCommand: aCommandString 
	
	aCommandString do: [ :aCommand | 
		
		(commands at: aCommand ifAbsent: [^self]) value.
	].

!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:19:59'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:19:59'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:20:53' prior: 50638823!
readCommandPackage: aCommandString 
	
	aCommandString do: [ :aCommand | (commands at: aCommand ifAbsent: [^self]) value.].

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:21:00' prior: 50632552!
actualDirection

	^ actualDirection ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:21:03' prior: 50632269!
actualPosition

	^ actualPosition! !

!methodRemoval: CardinalDirection #= stamp: 'ma 5/14/2023 23:23:15'!
= aCardinalDirection

	^ direction = aCardinalDirection direction !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:23:19'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:23:19'!
FAILURE!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:23:20'!
FAILURE!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'ma 5/14/2023 23:23:31' overrides: 16901772!
= aCardinalDirection

	^ direction = aCardinalDirection direction ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:23:35'!
PASSED!

----SNAPSHOT----(14 May 2023 23:26:44) CuisUniversity-5706.image priorSource: 9828729!

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:26:50'!
PASSED!

!methodRemoval: CardinalDirection class #pointing: stamp: 'ma 5/14/2023 23:27:31'!
pointing: aDirection
	
	self subclassResponsibility !
!CardinalDirection methodsFor: 'equals' stamp: 'ma 5/14/2023 23:28:15' prior: 50639291 overrides: 16901772!
= aCardinalDirection

	^ direction class = self class! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:28:20'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:28:20'!
FAILURE!
!CardinalDirection methodsFor: 'equals' stamp: 'ma 5/14/2023 23:23:31' prior: 50639470 overrides: 16901772!
= aCardinalDirection

	^ direction = aCardinalDirection direction ! !

!testRun: #MarsRoverTests #test01TheRoverDoesNotMoveWithEmptyCommand stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test02TheRoverMovesWithSingleForwardCommand stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test03TheRoverMovesWithSingleBackwardCommand stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test04TheRoverMovesWithSingleForwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test05TheRoverMovesWithSingleBackwardCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test06TheRoverDoesNotMovesWithEmptyCommandWithAnotherInitialPosition stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test07TheRoverMovesWithSingleForwardCommandFacingSouth stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test08TheRoverMovesWithSingleBackwardCommandFacingSouth stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test09TheRoverMovesWithSingleForwardCommandFacingEast stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test10TheRoverMovesWithSingleBackwardCommandFacingEast stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test11TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test12TheRoverRotatesToLeftWhenFacingSouth stamp: 'ma 5/14/2023 23:28:39'!
PASSED!

!testRun: #MarsRoverTests #test13TheRoverRotatesToLeftWhenFacingNorth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test14TheRoverMovesForwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test15TheRoverMovesBackwardTwiceFacingNorth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test16TheRoverMovesForwardAndBackwardFacingNorth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test17TheRoverMovesForwardTwiceFacingSouth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test18TheRoverMovesForwardThriceFacingSouth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test19TheRoverMovesForwardTwiceAndBackwardFacingSouth stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test20TheRoverReceivesInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test21TheRoverReceivesAnotherInvalidCommandAndStopsReadingCommands stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

!testRun: #MarsRoverTests #test22TheRoverReceivesACyclicCommandAndEndsAtInitialPosition stamp: 'ma 5/14/2023 23:28:40'!
PASSED!

----SNAPSHOT----(14 May 2023 23:28:43) CuisUniversity-5706.image priorSource: 9847296!